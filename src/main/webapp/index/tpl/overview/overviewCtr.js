'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/* jshint esversion: 6 */
(function (domeApp, undefined) {
	'use strict';

	if (typeof domeApp === 'undefined') return;
	domeApp.controller('OverviewCtr', ['$scope', 'api', function ($scope, api) {
		$scope.data = {};
		var allRequests = ['project', 'deployment', 'resource', 'alarmList', 'actionList', 'usage', 'id', 'version'].map(function (type) {
			return api.overview[type]().then(function (data) {
				return angular.merge($scope.data, data);
			});
		});

		$scope.trackerReady = false;
		api.SimplePromise.all([api.user.whoami(), api.SimplePromise.all(allRequests)]).then(function (_ref) {
			var _ref2 = _slicedToArray(_ref, 1),
			    user = _ref2[0];

			if (!user.isAdmin) return;
			var data = {
				build_auto: $scope.data.action.build.auto.join(),
				build_manual: $scope.data.action.build.manual.join(),
				deploy_auto: $scope.data.action.deploy.auto.join(),
				deploy_online: $scope.data.action.deploy.online.join(),
				memory_using: $scope.data.memory.using,
				memory_free: $scope.data.memory.free,
				cpu_load_0: $scope.data.cpu.load_0_25,
				cpu_load_25: $scope.data.cpu.load_25_50,
				cpu_load_50: $scope.data.cpu.load_50_75,
				cpu_load_75: $scope.data.cpu.load_75_100,
				disk_using: $scope.data.disk.using,
				disk_free: $scope.data.disk.free,
				node_online: $scope.data.node.online,
				node_offline: $scope.data.node.offline,
				project_collection: $scope.data.project.collection,
				project_total: $scope.data.project.total,
				deploy_collection: $scope.data.deploy.collection,
				deploy_total: $scope.data.deploy.total,
				image_project: $scope.data.image.project,
				uuid: $scope.data.id,
				version: $scope.data.version
			};
			$scope.trackerUrl = Object.keys(data).map(function (k) {
				return encodeURIComponent(k) + '=' + encodeURIComponent(data[k]);
			}).join('&');
			$scope.trackerReady = true;
		});
	}]);
})(window.domeApp);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4L3RwbC9vdmVydmlldy9vdmVydmlld0N0ci5lcyJdLCJuYW1lcyI6WyJkb21lQXBwIiwidW5kZWZpbmVkIiwiY29udHJvbGxlciIsIiRzY29wZSIsImFwaSIsImRhdGEiLCJhbGxSZXF1ZXN0cyIsIm1hcCIsIm92ZXJ2aWV3IiwidHlwZSIsInRoZW4iLCJhbmd1bGFyIiwibWVyZ2UiLCJ0cmFja2VyUmVhZHkiLCJTaW1wbGVQcm9taXNlIiwiYWxsIiwidXNlciIsIndob2FtaSIsImlzQWRtaW4iLCJidWlsZF9hdXRvIiwiYWN0aW9uIiwiYnVpbGQiLCJhdXRvIiwiam9pbiIsImJ1aWxkX21hbnVhbCIsIm1hbnVhbCIsImRlcGxveV9hdXRvIiwiZGVwbG95IiwiZGVwbG95X29ubGluZSIsIm9ubGluZSIsIm1lbW9yeV91c2luZyIsIm1lbW9yeSIsInVzaW5nIiwibWVtb3J5X2ZyZWUiLCJmcmVlIiwiY3B1X2xvYWRfMCIsImNwdSIsImxvYWRfMF8yNSIsImNwdV9sb2FkXzI1IiwibG9hZF8yNV81MCIsImNwdV9sb2FkXzUwIiwibG9hZF81MF83NSIsImNwdV9sb2FkXzc1IiwibG9hZF83NV8xMDAiLCJkaXNrX3VzaW5nIiwiZGlzayIsImRpc2tfZnJlZSIsIm5vZGVfb25saW5lIiwibm9kZSIsIm5vZGVfb2ZmbGluZSIsIm9mZmxpbmUiLCJwcm9qZWN0X2NvbGxlY3Rpb24iLCJwcm9qZWN0IiwiY29sbGVjdGlvbiIsInByb2plY3RfdG90YWwiLCJ0b3RhbCIsImRlcGxveV9jb2xsZWN0aW9uIiwiZGVwbG95X3RvdGFsIiwiaW1hZ2VfcHJvamVjdCIsImltYWdlIiwidXVpZCIsImlkIiwidmVyc2lvbiIsInRyYWNrZXJVcmwiLCJPYmplY3QiLCJrZXlzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiayIsIndpbmRvdyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsQ0FBQyxVQUFVQSxPQUFWLEVBQW1CQyxTQUFuQixFQUE4QjtBQUM5Qjs7QUFDQSxL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LGFBQVMzRCxPQUFPRSxJQUFQLENBQVl5RDtBQXJCZixJQUFYO0FBdUJBM0QsVUFBTzRELFVBQVAsR0FBb0JDLE9BQU9DLElBQVAsQ0FBWTVELElBQVosRUFBa0JFLEdBQWxCLENBQXNCO0FBQUEsV0FBUTJELG1CQUFtQkMsQ0FBbkIsQ0FBUixTQUFpQ0QsbUJBQW1CN0QsS0FBSzhELENBQUwsQ0FBbkIsQ0FBakM7QUFBQSxJQUF0QixFQUFzRjVDLElBQXRGLENBQTJGLEdBQTNGLENBQXBCO0FBQ0FwQixVQUFPVSxZQUFQLEdBQXNCLElBQXRCO0FBQ0EsR0E5QkQ7QUErQkMsRUE5Q2dDLENBQWxDO0FBK0NBLENBbERELEVBa0RHdUQsT0FBT3BFLE9BbERWIiwiZmlsZSI6ImluZGV4L3RwbC9vdmVydmlldy9vdmVydmlld0N0ci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGpzaGludCBlc3ZlcnNpb246IDYgKi9cbihmdW5jdGlvbiAoZG9tZUFwcCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0aWYgKHR5cGVvZiBkb21lQXBwID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuXHRkb21lQXBwLmNvbnRyb2xsZXIoJ092ZXJ2aWV3Q3RyJywgWyckc2NvcGUnLCAnYXBpJywgZnVuY3Rpb24gKCRzY29wZSwgYXBpKSB7XG4gICAgJHNjb3BlLmRhdGEgPSB7fTtcbiAgICBsZXQgYWxsUmVxdWVzdHMgPSBbXG4gICAgICAncHJvamVjdCcsXG4gICAgICAnZGVwbG95bWVudCcsXG4gICAgICAncmVzb3VyY2UnLFxuICAgICAgJ2FsYXJtTGlzdCcsXG4gICAgICAnYWN0aW9uTGlzdCcsXG4gICAgICAndXNhZ2UnLFxuICAgICAgJ2lkJyxcbiAgICAgICd2ZXJzaW9uJyxcblx0XHRdLm1hcCh0eXBlID0+IGFwaS5vdmVydmlld1t0eXBlXSgpXG5cdFx0XHRcdC50aGVuKGRhdGEgPT4gYW5ndWxhci5tZXJnZSgkc2NvcGUuZGF0YSwgZGF0YSkpKTtcblxuXHRcdCRzY29wZS50cmFja2VyUmVhZHkgPSBmYWxzZTtcblx0XHRhcGkuU2ltcGxlUHJvbWlzZS5hbGwoW1xuXHRcdFx0YXBpLnVzZXIud2hvYW1pKCksXG4gICAgICBhcGkuU2ltcGxlUHJvbWlzZS5hbGwoYWxsUmVxdWVzdHMpLFxuXHRcdF0pLnRoZW4oKFt1c2VyXSkgPT4ge1xuICAgICAgaWYgKCF1c2VyLmlzQWRtaW4pIHJldHVybjtcblx0XHRcdGxldCBkYXRhID0ge1xuXHRcdFx0XHRidWlsZF9hdXRvOiAkc2NvcGUuZGF0YS5hY3Rpb24uYnVpbGQuYXV0by5qb2luKCksXG5cdFx0XHRcdGJ1aWxkX21hbnVhbDogJHNjb3BlLmRhdGEuYWN0aW9uLmJ1aWxkLm1hbnVhbC5qb2luKCksXG5cdFx0XHRcdGRlcGxveV9hdXRvOiAkc2NvcGUuZGF0YS5hY3Rpb24uZGVwbG95LmF1dG8uam9pbigpLFxuXHRcdFx0XHRkZXBsb3lfb25saW5lOiAkc2NvcGUuZGF0YS5hY3Rpb24uZGVwbG95Lm9ubGluZS5qb2luKCksXHRcblx0XHRcdFx0bWVtb3J5X3VzaW5nOiAkc2NvcGUuZGF0YS5tZW1vcnkudXNpbmcsXG5cdFx0XHRcdG1lbW9yeV9mcmVlOiAkc2NvcGUuZGF0YS5tZW1vcnkuZnJlZSxcblx0XHRcdFx0Y3B1X2xvYWRfMDogJHNjb3BlLmRhdGEuY3B1LmxvYWRfMF8yNSxcblx0XHRcdFx0Y3B1X2xvYWRfMjU6ICRzY29wZS5kYXRhLmNwdS5sb2FkXzI1XzUwLFxuXHRcdFx0XHRjcHVfbG9hZF81MDogJHNjb3BlLmRhdGEuY3B1LmxvYWRfNTBfNzUsXG5cdFx0XHRcdGNwdV9sb2FkXzc1OiAkc2NvcGUuZGF0YS5jcHUubG9hZF83NV8xMDAsXG5cdFx0XHRcdGRpc2tfdXNpbmc6ICRzY29wZS5kYXRhLmRpc2sudXNpbmcsXG5cdFx0XHRcdGRpc2tfZnJlZTogJHNjb3BlLmRhdGEuZGlzay5mcmVlLFxuXHRcdFx0XHRub2RlX29ubGluZTogJHNjb3BlLmRhdGEubm9kZS5vbmxpbmUsXG5cdFx0XHRcdG5vZGVfb2ZmbGluZTogJHNjb3BlLmRhdGEubm9kZS5vZmZsaW5lLFxuXHRcdFx0XHRwcm9qZWN0X2NvbGxlY3Rpb246ICRzY29wZS5kYXRhLnByb2plY3QuY29sbGVjdGlvbixcblx0XHRcdFx0cHJvamVjdF90b3RhbDogJHNjb3BlLmRhdGEucHJvamVjdC50b3RhbCxcblx0XHRcdFx0ZGVwbG95X2NvbGxlY3Rpb246ICRzY29wZS5kYXRhLmRlcGxveS5jb2xsZWN0aW9uLFxuXHRcdFx0XHRkZXBsb3lfdG90YWw6ICRzY29wZS5kYXRhLmRlcGxveS50b3RhbCxcblx0XHRcdFx0aW1hZ2VfcHJvamVjdDogJHNjb3BlLmRhdGEuaW1hZ2UucHJvamVjdCxcblx0XHRcdFx0dXVpZDogJHNjb3BlLmRhdGEuaWQsXG4gICAgICAgIHZlcnNpb246ICRzY29wZS5kYXRhLnZlcnNpb24sXG5cdFx0XHR9O1xuXHRcdFx0JHNjb3BlLnRyYWNrZXJVcmwgPSBPYmplY3Qua2V5cyhkYXRhKS5tYXAoayA9PiBgJHtlbmNvZGVVUklDb21wb25lbnQoayl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KGRhdGFba10pfWApLmpvaW4oJyYnKTtcblx0XHRcdCRzY29wZS50cmFja2VyUmVhZHkgPSB0cnVlO1x0XG5cdFx0fSk7XG4gIH1dKTtcbn0pKHdpbmRvdy5kb21lQXBwKTtcbiJdfQ==
