/*
 * @description: dome system common stylesheet
 * @version: 0.1
 */
/*
 * @description: common css variable and function
 * @version: 0.1
 */
/* common style or recover style of bootstrap*/
body {
  min-width: 1340px;
  font-size: 14px;
  color: #888;
  font-family: Helvetica,Arial,"Helvetica Neue","Hiragino Sans GB","Microsoft YaHei",Simsun,sans-self;
  -webkit-text-size-adjust: 100%;
  background-color: #f0f2f5; }

ul {
  list-style-type: none;
  padding: 0;
  margin: 0; }

* {
  outline: none; }

h1, h2, h3, h4, h5, h6 {
  margin: 0;
  font-weight: 400; }

a {
  cursor: pointer;
  color: #888;
  text-decoration: none; }
  a:hover {
    color: #188ae2;
    text-decoration: none; }
  a.link, a.link:hover {
    color: #5dabf3;
    text-decoration: underline; }
  a.link-safe, a.link-safe:hover {
    color: #4bd396; }
  a.link-primary, a.link-primary:hover {
    color: #5dabf3; }
  a:focus {
    outline: none; }
  a.disabled {
    color: #cdcdcf;
    cursor: default; }

label {
  font-weight: 400;
  margin-bottom: 0px; }

em, i {
  font-style: normal; }

button:disabled, input[type="button"]:disabled, input[type="text"]:disabled {
  cursor: not-allowed; }

* {
  outline: none; }

.txt-error {
  display: block;
  color: #f5707a; }

/* style of input */
input:not(.ng-pristine).ng-invalid, textarea:not(.ng-pristine).ng-invalid, .need-valid input.ng-invalid, .need-valid textarea.ng-invalid,
input:not(.ng-pristine).ng-invalid-pattern, textarea:not(.ng-pristine).ng-invalid-pattern, .need-valid input.ng-invalid-pattern, .need-valid textarea.ng-invalid-pattern {
  border: 1px solid #f5707a !important; }
  input:not(.ng-pristine).ng-invalid:focus, textarea:not(.ng-pristine).ng-invalid:focus, .need-valid input.ng-invalid:focus, .need-valid textarea.ng-invalid:focus,
  input:not(.ng-pristine).ng-invalid-pattern:focus, textarea:not(.ng-pristine).ng-invalid-pattern:focus, .need-valid input.ng-invalid-pattern:focus, .need-valid textarea.ng-invalid-pattern:focus {
    border: 1px solid #f5707a !important; }

input[required]:invalid, input:focus:invalid, textarea[required]:invalid, textarea:focus:invalid {
  -moz-box-shadow: none;
  -webkit-box-shadow: none;
  box-shadow: none; }

.ui-input-white {
  height: 34px;
  padding-left: 12px;
  padding-right: 20px;
  border: 1px solid #cfcfcf;
  border-radius: 3px; }

textarea.ui-input-white {
  min-height: 66px;
  resize: none; }

.ui-input-fill {
  padding-left: 12px;
  border: none;
  border-radius: 3px;
  border: 1px solid #ddd; }
  .ui-input-fill:focus {
    border: 1px solid #5dabf3; }

.ui-input-txt {
  padding-top: 5px; }

.ui-input-full {
  width: 100%; }

input.ui-input-fill {
  height: 34px; }

textarea.ui-input-fill {
  min-height: 56px; }

.ui-input-sm {
  width: 60px;
  font-size: 14px; }

/* style of input end */
/* style of button */
.ui-btn {
  display: inline-block;
  text-align: center; }
  .ui-btn .btn-txt {
    padding-right: 4px; }

.ui-btn, .ui-btn:hover, .ui-btn:focus {
  color: #fff;
  font-size: 14px;
  border: none;
  border-radius: 3px; }

.ui-btn-sm {
  min-width: 65px;
  height: 34px; }

.ui-btn-sm.ui-btn-link {
  padding: 6px 6px 3px; }

.ui-btn-md {
  min-width: 114px;
  height: 34px;
  font-weight: normal; }

.ui-btn-lg {
  min-width: 100px;
  height: 34px;
  font-weight: normal; }

.ui-btn-lg-disabled {
  background-color: #aaa !important; }

.ui-btn-link {
  padding: 7px 12px; }
  .ui-btn-link.ui-btn-md {
    padding-top: 7px; }
  .ui-btn-link:hover {
    text-decoration: none; }

.ui-btn-none {
  height: auto !important;
  border: none;
  background: none;
  padding: 0 !important; }
  .ui-btn-none a:hover, .ui-btn-none:active, .ui-btn-none:focus, .ui-btn-none:link, .ui-btn-none:visited {
    outline: none;
    background: none;
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none; }

.ui-btn-safe {
  background-color: #4bd396; }

.ui-btn-primary, .ui-btn-primary:hover, .ui-btn-primary:focus {
  background-color: #5dabf3; }

.ui-btn-bright, .ui-btn-bright:hover, .ui-btn-bright:focus {
  background-color: #188ae2; }

.ui-btn-active {
  background-color: #4bd396; }

.ui-btn-white {
  background-color: #fff;
  color: #888;
  border: 1px solid #ddd; }
  .ui-btn-white:hover, .ui-btn-white:focus, .ui-btn-white:active {
    color: #888;
    border: 1px solid #ddd; }

.ui-btn-select {
  text-align: left;
  height: 34px; }
  .ui-btn-select .icon-down {
    float: right;
    margin-top: 7px; }

.ui-btn-error {
  background-color: #f5707a; }

.ui-btn + .ui-btn {
  margin-left: 15px; }

table tr:hover .ui-table-link {
  color: #188ae2; }

.ui-table-dome {
  width: 100%; }
  .ui-table-dome > thead {
    background-color: #fff; }
    .ui-table-dome > thead th {
      font-weight: bold; }
    .ui-table-dome > thead tr {
      border-bottom: 2px solid #ddd; }
  .ui-table-dome.full th:first-child, .ui-table-dome.full td:first-child {
    padding-left: 0px; }
  .ui-table-dome.full th:last-child, .ui-table-dome.full td:last-child {
    padding-right: 0px; }

.ui-table-primary {
  border: 1px solid #ddd; }
  .ui-table-primary thead th {
    font-weight: 400; }

.ui-table-dome > tbody > tr > td, .ui-table-dome > thead > tr > th, .ui-table-primary > tbody > tr > td, .ui-table-primary > thead > tr > th {
  vertical-align: middle;
  height: 45px;
  padding: 8px;
  border-bottom: 1px solid #ddd; }

.com-loading {
  margin: 100px auto;
  position: absolute;
  width: 70px;
  height: 70px;
  left: 50%;
  margin-left: -35px;
  text-align: center;
  -moz-animation: rotate 1.8s infinite linear;
  -webkit-animation: rotate 1.8s infinite linear;
  animation: rotate 1.8s infinite linear;
  z-index: 99; }
  .com-loading.ng-leave {
    display: none; }
  .com-loading .dot1, .com-loading .dot2 {
    width: 60%;
    height: 60%;
    display: inline-block;
    position: absolute;
    top: 0;
    left: 0;
    background-color: #67CF22;
    border-radius: 100%;
    -moz-animation: bounce 2s infinite ease-in-out;
    -webkit-animation: bounce 2s infinite ease-in-out;
    animation: bounce 2s infinite ease-in-out; }
  .com-loading .dot2 {
    top: auto;
    bottom: 0px;
    -moz-animation-delay: -1s;
    -webkit-animation-delay: -1s;
    animation-delay: -1s; }
@-moz-keyframes bounce {
  0%, 100% {
    -moz-transform: scale(0);
    transform: scale(0); }
  50% {
    -moz-transform: scale(1);
    transform: scale(1); } }
@-webkit-keyframes bounce {
  0%, 100% {
    -webkit-transform: scale(0);
    transform: scale(0); }
  50% {
    -webkit-transform: scale(1);
    transform: scale(1); } }
@keyframes bounce {
  0%, 100% {
    -moz-transform: scale(0);
    -ms-transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0); }
  50% {
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -webkit-transform: scale(1);
    transform: scale(1); } }
@-moz-keyframes rotate {
  100% {
    -moz-transform: rotate(360deg);
    transform: rotate(360deg); } }
@-webkit-keyframes rotate {
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg); } }
@keyframes rotate {
  100% {
    -moz-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg); } }
/* style of button end */
.d-modal-header, .d-modal-footer {
  height: 58px;
  padding-left: 15px;
  padding-right: 15px; }

.d-modal-header {
  line-height: 58px;
  border-radius: 3px 3px 0 0;
  color: #188ae2;
  font-size: 16px;
  border-top: 5px solid #188ae2;
  overflow: hidden; }
  .d-modal-header .model-prompt {
    float: right; }

.d-modal-footer {
  padding-top: 12px;
  padding-bottom: 12px; }

.modal-content {
  border-radius: 3px; }
  .modal-content .d-modal-full {
    max-height: 500px;
    overflow-y: auto; }
    .modal-content .d-modal-full > .ui-table-dome {
      width: 100%; }
      .modal-content .d-modal-full > .ui-table-dome th:first-child, .modal-content .d-modal-full > .ui-table-dome td:first-child {
        padding-left: 20px; }
      .modal-content .d-modal-full > .ui-table-dome th:last-child, .modal-content .d-modal-full > .ui-table-dome td:last-child {
        padding-right: 20px; }
  .modal-content .d-modal-container {
    padding: 20px; }
  .modal-content .com-loading {
    margin-top: 10px; }

ul.modal-info {
  text-align: center; }
  ul.modal-info > li {
    padding-top: 18px; }
    ul.modal-info > li .info-name {
      display: inline-block;
      width: 120px;
      padding-top: 6px;
      text-align: left;
      vertical-align: top; }
    ul.modal-info > li .info-txt {
      display: inline-block;
      width: 362px; }
    ul.modal-info > li .info-content {
      margin-left: 12px;
      width: 300px;
      display: inline-block;
      vertical-align: top; }
    ul.modal-info > li .align-input {
      display: inline-block;
      margin-top: 11px; }

.modal-body {
  word-break: break-word; }

.modal-footer {
  border-top: none; }

.com-user-option {
  position: absolute;
  top: 28px;
  right: 0;
  width: 120px;
  background-color: #fff;
  border-radius: 3px;
  border: 1px solid #f0f2f5;
  -moz-box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.2);
  -webkit-box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.2);
  box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.2); }
  .com-user-option li.arrow {
    position: absolute;
    width: 0;
    height: 0;
    top: -9px;
    right: 19px;
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-bottom: 9px solid #fff; }
  .com-user-option li a {
    display: block;
    padding: 4px 10px 4px 10px;
    border-bottom: 1px solid #f0f2f5; }
  .com-user-option li:last-child a {
    border-bottom: none; }

.com-select-con {
  position: relative;
  width: 240px;
  display: inline-block; }
  .com-select-con button.ui-btn-select {
    width: 100%;
    padding-left: 12px; }
  .com-select-con .select-list {
    position: absolute;
    top: 34px;
    left: 0;
    width: 100%;
    margin-top: 2px;
    z-index: 99;
    max-height: 300px;
    overflow: auto;
    border: 1px solid #ddd;
    border-radius: 3px;
    background-color: #fff;
    text-align: left; }
    .com-select-con .select-list li a {
      display: block;
      line-height: 30px;
      margin-top: 6px;
      margin-bottom: 6px;
      padding-left: 12px;
      font-weight: 400;
      text-decoration: none;
      overflow: hidden; }
      .com-select-con .select-list li a:hover, .com-select-con .select-list li a:focus {
        background-color: #f0f2f5; }
      .com-select-con .select-list li a .item-right {
        float: right;
        margin-right: 15px;
        word-break: break-all;
        word-wrap: break-word; }
  .com-select-con[label] {
    border: 1px solid #ddd;
    border-radius: 3px;
    padding-left: 12px;
    height: auto; }
    .com-select-con[label] .select-list {
      top: 100%; }
  .com-select-con .selected-labels {
    display: -webkit-flex;
    display: flex;
    -webkit-flex-wrap: wrap;
    flex-wrap: wrap;
    width: 100%; }
    .com-select-con .selected-labels li.select-label {
      margin: 4px 8px 4px 0;
      padding: 4px;
      width: auto;
      background-color: #f0f2f5;
      border-radius: 3px; }
    .com-select-con .selected-labels li.select-input {
      width: 120px; }
      .com-select-con .selected-labels li.select-input input {
        border: none;
        min-width: 120px; }



/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=../../maps/common/css/base.css.map */
