'use strict';

/*
 * @author ChandraLee
 */

(function (domeApp, undefined) {
	'use strict';

	if (typeof domeApp === 'undefined') return;

	domeApp.controller('AlarmAddHostsCtr', AlarmAddHostCtr);

	function AlarmAddHostCtr($scope, $domeCluster, $domeAlarm, $state, $domePublic) {
		var vm = this;
		var id = +$state.params.id,
		    hostGroupName = $state.params.name,
		    hostGroupService = $domeAlarm.getInstance('HostGroupService'),
		    nodeService = $domeCluster.getInstance('NodeService');
		if (!id || !hostGroupName) {
			$state.go('alarm.hostgroups');
			return;
		}
		$scope.$emit('pageTitle', {
			title: '添加主机—' + hostGroupName,
			descrition: '在这里您可以将主机添加到主机组中。',
			mod: 'monitor'
		});
		var hostGroupHostList = [];
		vm.cluster = {};
		vm.variable = {
			nodeKey: '',
			selectedNodeKey: ''
		};
		vm.toggleCluster = function (clusterId, clusterName) {
			vm.cluster.id = clusterId;
			vm.cluster.name = clusterName;
			nodeService.getNodeList(clusterId).then(function (res) {
				vm.nodeListIns.init(res.data.result, clusterName);
			}, function () {
				vm.nodeListIns.init([], clusterName);
			});
		};
		vm.cancelModify = function () {
			vm.nodeListIns.initSelectedList(hostGroupHostList);
		};
		vm.saveModify = function () {
			var selectedList = [];
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = vm.nodeListIns.selectedList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var selectedNode = _step.value;

					selectedList.push({
						hostname: selectedNode.name,
						ip: selectedNode.ip,
						id: selectedNode.id,
						cluster: selectedNode.cluster
					});
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			hostGroupService.addHost(id, selectedList).then(function () {
				$domePublic.openPrompt('添加成功！');
				$state.go('alarm.hostgroups');
			}, function (res) {
				$domePublic.openWarning({
					title: '添加失败！',
					msg: 'Message:' + res.data.resultMsg
				});
			});
		};
		nodeService.getData().then(function (res) {
			vm.clusterList = res.data.result || [];
			vm.nodeListIns = $domeAlarm.getInstance('NodeList');
			if (vm.clusterList[0]) {
				vm.toggleCluster(vm.clusterList[0].id, vm.clusterList[0].name);
			}
		});
	}
	AlarmAddHostCtr.$inject = ['$scope', '$domeCluster', '$domeAlarm', '$state', '$domePublic'];
})(window.domeApp);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4L3RwbC9hbGFybUFkZEhvc3RzL2FsYXJtQWRkSG9zdHNDdHIuZXMiXSwibmFtZXMiOlsiZG9tZUFwcCIsInVuZGVmaW5lZCIsImNvbnRyb2xsZXIiLCJBbGFybUFkZEhvc3RDdHIiLCIkc2NvcGUiLCIkZG9tZUNsdXN0ZXIiLCIkZG9tZUFsYXJtIiwiJHN0YXRlIiwiJGRvbWVQdWJsaWMiLCJ2bSIsImlkIiwicGFyYW1zIiwiaG9zdEdyb3VwTmFtZSIsIm5hbWUiLCJob3N0R3JvdXBTZXJ2aWNlIiwiZ2V0SW5zdGFuY2UiLCJub2RlU2VydmljZSIsImdvIiwiJGVtaXQiLCJ0aXRsZSIsImRlc2NyaXRpb24iLCJtb2QiLCJob3N0R3JvdXBIb3N0TGlzdCIsImNsdXN0ZXIiLCJ2YXJpYWJsZSIsIm5vZGVLZXkiLCJzZWxlY3RlZE5vZGVLZXkiLCJ0b2dnbGVDbHVzdGVyIiwiY2x1c3RlcklkIiwiY2x1c3Rlck5hbWUiLCJnZXROb2RlTGlzdCIsInRoZW4iLCJyZXMiLCJub2RlTGlzdElucyIsImluaXQiLCJkYXRhIiwicmVzdWx0IiwiY2FuY2VsTW9kaWZ5IiwiaW5pdFNlbGVjdGVkTGlzdCIsInNhdmVNb2RpZnkiLCJzZWxlY3RlZExpc3QiLCJzZWxlY3RlZE5vZGUiLCJwdXNoIiwiaG9zdG5hbWUiLCJpcCIsImFkZEhvc3QiLCJvcGVuUHJvbXB0Iiwib3Blbldhcm5pbmciLCJtc2ciLCJyZXN1bHRNc2ciLCJnZXREYXRhIiwiY2x1c3Rlckxpc3QiLCIkaW5qZWN0Iiwid2luZG93Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBSUEsQ0FBQyxVQUFVQSxPQUFWLEVBQW1CQyxTQUFuQixFQUE4QjtBQUM5Qjs7QUFDQSxLQUFJLE9BQU9ELE9BQVAsS0FBbUIsV0FBdkIsRUFBb0M7O0FBRXBDQSxTQUFRRSxVQUFSLENBQW1CLGtCQUFuQixFQUF1Q0MsZUFBdkM7O0FBRUEsVUFBU0EsZUFBVCxDQUF5QkMsTUFBekIsRUFBaUNDLFlBQWpDLEVBQStDQyxV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QjtBQUNBLE9BQUlOLEdBQUcwQyxXQUFILENBQWUsQ0FBZixDQUFKLEVBQXVCO0FBQ3RCMUMsT0FBR2tCLGFBQUgsQ0FBaUJsQixHQUFHMEMsV0FBSCxDQUFlLENBQWYsRUFBa0J6QyxFQUFuQyxFQUF1Q0QsR0FBRzBDLFdBQUgsQ0FBZSxDQUFmLEVBQWtCdEMsSUFBekQ7QUFDQTtBQUNELEdBTkQ7QUFPQTtBQUNEVixpQkFBZ0JpRCxPQUFoQixHQUEwQixDQUFDLFFBQUQsRUFBVyxjQUFYLEVBQTJCLFlBQTNCLEVBQXlDLFFBQXpDLEVBQW1ELGFBQW5ELENBQTFCO0FBQ0EsQ0FwRUQsRUFvRUdDLE9BQU9yRCxPQXBFViIsImZpbGUiOiJpbmRleC90cGwvYWxhcm1BZGRIb3N0cy9hbGFybUFkZEhvc3RzQ3RyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEBhdXRob3IgQ2hhbmRyYUxlZVxuICovXG5cbihmdW5jdGlvbiAoZG9tZUFwcCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0aWYgKHR5cGVvZiBkb21lQXBwID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuXG5cdGRvbWVBcHAuY29udHJvbGxlcignQWxhcm1BZGRIb3N0c0N0cicsIEFsYXJtQWRkSG9zdEN0cik7XG5cblx0ZnVuY3Rpb24gQWxhcm1BZGRIb3N0Q3RyKCRzY29wZSwgJGRvbWVDbHVzdGVyLCAkZG9tZUFsYXJtLCAkc3RhdGUsICRkb21lUHVibGljKSB7XG5cdFx0bGV0IHZtID0gdGhpcztcblx0XHRjb25zdCBpZCA9ICskc3RhdGUucGFyYW1zLmlkLFxuXHRcdFx0aG9zdEdyb3VwTmFtZSA9ICRzdGF0ZS5wYXJhbXMubmFtZSxcblx0XHRcdGhvc3RHcm91cFNlcnZpY2UgPSAkZG9tZUFsYXJtLmdldEluc3RhbmNlKCdIb3N0R3JvdXBTZXJ2aWNlJyksXG5cdFx0XHRub2RlU2VydmljZSA9ICRkb21lQ2x1c3Rlci5nZXRJbnN0YW5jZSgnTm9kZVNlcnZpY2UnKTtcblx0XHRpZiAoIWlkIHx8ICFob3N0R3JvdXBOYW1lKSB7XG5cdFx0XHQkc3RhdGUuZ28oJ2FsYXJtLmhvc3Rncm91cHMnKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0JHNjb3BlLiRlbWl0KCdwYWdlVGl0bGUnLCB7XG5cdFx0XHR0aXRsZTogJ+a3u+WKoOS4u+acuuKAlCcgKyBob3N0R3JvdXBOYW1lLFxuXHRcdFx0ZGVzY3JpdGlvbjogJ+WcqOi/memHjOaCqOWPr+S7peWwhuS4u+acuua3u+WKoOWIsOS4u+acuue7hOS4reOAgicsXG5cdFx0XHRtb2Q6ICdtb25pdG9yJ1xuXHRcdH0pO1xuXHRcdGxldCBob3N0R3JvdXBIb3N0TGlzdCA9IFtdO1xuXHRcdHZtLmNsdXN0ZXIgPSB7fTtcblx0XHR2bS52YXJpYWJsZSA9IHtcblx0XHRcdG5vZGVLZXk6ICcnLFxuXHRcdFx0c2VsZWN0ZWROb2RlS2V5OiAnJ1xuXHRcdH07XG5cdFx0dm0udG9nZ2xlQ2x1c3RlciA9IGZ1bmN0aW9uIChjbHVzdGVySWQsIGNsdXN0ZXJOYW1lKSB7XG5cdFx0XHR2bS5jbHVzdGVyLmlkID0gY2x1c3RlcklkO1xuXHRcdFx0dm0uY2x1c3Rlci5uYW1lID0gY2x1c3Rlck5hbWU7XG5cdFx0XHRub2RlU2VydmljZS5nZXROb2RlTGlzdChjbHVzdGVySWQpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHRcdFx0XHR2bS5ub2RlTGlzdElucy5pbml0KHJlcy5kYXRhLnJlc3VsdCwgY2x1c3Rlck5hbWUpO1xuXHRcdFx0fSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2bS5ub2RlTGlzdElucy5pbml0KFtdLCBjbHVzdGVyTmFtZSk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHRcdHZtLmNhbmNlbE1vZGlmeSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZtLm5vZGVMaXN0SW5zLmluaXRTZWxlY3RlZExpc3QoaG9zdEdyb3VwSG9zdExpc3QpO1xuXHRcdH07XG5cdFx0dm0uc2F2ZU1vZGlmeSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGxldCBzZWxlY3RlZExpc3QgPSBbXTtcblx0XHRcdGZvciAobGV0IHNlbGVjdGVkTm9kZSBvZiB2bS5ub2RlTGlzdElucy5zZWxlY3RlZExpc3QpIHtcblx0XHRcdFx0c2VsZWN0ZWRMaXN0LnB1c2goe1xuXHRcdFx0XHRcdGhvc3RuYW1lOiBzZWxlY3RlZE5vZGUubmFtZSxcblx0XHRcdFx0XHRpcDogc2VsZWN0ZWROb2RlLmlwLFxuXHRcdFx0XHRcdGlkOiBzZWxlY3RlZE5vZGUuaWQsXG5cdFx0XHRcdFx0Y2x1c3Rlcjogc2VsZWN0ZWROb2RlLmNsdXN0ZXJcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRob3N0R3JvdXBTZXJ2aWNlLmFkZEhvc3QoaWQsIHNlbGVjdGVkTGlzdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCRkb21lUHVibGljLm9wZW5Qcm9tcHQoJ+a3u+WKoOaIkOWKn++8gScpO1xuXHRcdFx0XHQkc3RhdGUuZ28oJ2FsYXJtLmhvc3Rncm91cHMnKTtcblx0XHRcdH0sIGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdFx0JGRvbWVQdWJsaWMub3Blbldhcm5pbmcoe1xuXHRcdFx0XHRcdHRpdGxlOiAn5re75Yqg5aSx6LSl77yBJyxcblx0XHRcdFx0XHRtc2c6ICdNZXNzYWdlOicgKyByZXMuZGF0YS5yZXN1bHRNc2dcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHRcdG5vZGVTZXJ2aWNlLmdldERhdGEoKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdHZtLmNsdXN0ZXJMaXN0ID0gcmVzLmRhdGEucmVzdWx0IHx8IFtdO1xuXHRcdFx0dm0ubm9kZUxpc3RJbnMgPSAkZG9tZUFsYXJtLmdldEluc3RhbmNlKCdOb2RlTGlzdCcpO1xuXHRcdFx0aWYgKHZtLmNsdXN0ZXJMaXN0WzBdKSB7XG5cdFx0XHRcdHZtLnRvZ2dsZUNsdXN0ZXIodm0uY2x1c3Rlckxpc3RbMF0uaWQsIHZtLmNsdXN0ZXJMaXN0WzBdLm5hbWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdEFsYXJtQWRkSG9zdEN0ci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGRvbWVDbHVzdGVyJywgJyRkb21lQWxhcm0nLCAnJHN0YXRlJywgJyRkb21lUHVibGljJ107XG59KSh3aW5kb3cuZG9tZUFwcCk7XG4iXX0=
