/*
 * @description: console system common stylesheet
 * @version: 0.1
 */
/*
 * @description: common css variable and function
 * @version: 0.1
 */
.tool-nowrap {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap; }

.icon-doc, .icon-add, .icon-add-white, .icon-add-green, .icon-github, .icon-gitlab, .icon-centos, .icon-ubuntu, .icon-search, .icon-edit, .icon-down, .icon-down-white, .icon-down-round, .icon-delete, .icon-delete-disable, .icon-cancel, .icon-check, .icon-last, .icon-next, .icon-down-double, .icon-label, .icon-help, .icon-user, .icon-cpu, .icon-memory, .icon-order, .icon-fresh, .icon-copy, .icon-tool, .icon-config, .icon-alarm, .com-chose-repository .repository .icon-gitlab, .com-chose-repository .repository .icon-github {
  display: inline-block;
  vertical-align: middle; }

.icon-sprite {
  background-image: url(/index/images/icon-sa88e1b9836.png);
  background-repeat: no-repeat; }

.lib-sprite {
  background-image: url(/index/images/lib-s8f048dad46.png);
  background-repeat: no-repeat; }

.container {
  width: 100%; }

/* dome system icon */
.icon-doc {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -343px;
  height: 14px;
  width: 11px; }

.icon-add {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -54px;
  height: 14px;
  width: 14px; }

.icon-add-white {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -26px;
  height: 16px;
  width: 16px; }

.icon-add-green {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 0;
  height: 14px;
  width: 14px; }

.icon-github, .icon-gitlab, .icon-centos, .icon-ubuntu {
  margin-right: 6px; }

.icon-github {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -554px;
  height: 20px;
  width: 20px; }

.icon-gitlab {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -586px;
  height: 16px;
  width: 16px; }

.icon-centos {
  background: url(/index/images/lib-scbf2f341b5.png) no-repeat 0 0;
  height: 28px;
  width: 28px; }

.icon-ubuntu {
  background: url(/index/images/lib-scbf2f341b5.png) no-repeat 0 -91px;
  height: 28px;
  width: 28px; }

.icon-search {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -780px;
  height: 14px;
  width: 14px;
  margin-right: 6px; }

.icon-edit {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -431px;
  height: 19px;
  width: 20px; }

.icon-down {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -414px;
  height: 5px;
  width: 8px; }

.icon-down-white {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -397px;
  height: 5px;
  width: 8px; }

.icon-down.up, .icon-down-white.up {
  -moz-transform: rotate(-90deg);
  -ms-transform: rotate(-90deg);
  -webkit-transform: rotate(-90deg);
  transform: rotate(-90deg); }
.icon-down.top, .icon-down-white.top {
  margin-left: 8px;
  -moz-transform: rotate(180deg);
  -ms-transform: rotate(180deg);
  -webkit-transform: rotate(180deg);
  transform: rotate(180deg); }

.icon-down-round {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -369px;
  height: 16px;
  width: 16px; }

.icon-delete {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -313px;
  height: 18px;
  width: 17px; }

.icon-delete-disable {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -283px;
  height: 18px;
  width: 25px; }

.icon-cancel {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -107px;
  height: 10px;
  width: 10px;
  margin-left: 4px; }

.icon-check {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -129px;
  height: 8px;
  width: 11px; }

.icon-last, .icon-next, .icon-down-double {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -697px;
  height: 8px;
  width: 9px;
  width: 14px;
  height: 16px;
  background-position: 2px -694px; }

.icon-next {
  background-position: 2px -732px; }

.icon-down-double {
  -moz-transform: rotate(-90deg);
  -ms-transform: rotate(-90deg);
  -webkit-transform: rotate(-90deg);
  transform: rotate(-90deg); }
  .icon-down-double.up {
    -moz-transform: rotate(90deg);
    -ms-transform: rotate(90deg);
    -webkit-transform: rotate(90deg);
    transform: rotate(90deg); }

.icon-label {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -672px;
  height: 13px;
  width: 13px;
  margin-right: 4px; }

.icon-help {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -643px;
  height: 17px;
  width: 17px; }
  .icon-help:hover {
    background-position: 0 -614px; }

.icon-user {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -834px;
  height: 13px;
  width: 14px;
  margin-right: 4px; }

.icon-cpu {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -259px;
  height: 12px;
  width: 12px;
  margin-right: 4px; }

.icon-memory {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -717px;
  height: 6px;
  width: 14px;
  margin-left: 4px; }

.icon-order {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -755px;
  height: 13px;
  width: 8px;
  margin-left: 4px; }

.icon-fresh {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -508px;
  height: 34px;
  width: 34px;
  margin-right: 4px; }
  .icon-fresh:hover {
    background-position: 0 -462px; }

.icon-copy {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -216px;
  height: 31px;
  width: 28px;
  margin-right: 4px; }
  .icon-copy:hover {
    background-position: 0 -173px; }

.icon-tool {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -806px;
  height: 16px;
  width: 16px; }

.icon-config {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -149px;
  height: 12px;
  width: 12px;
  margin-right: 4px; }

.icon-alarm {
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -80px;
  height: 15px;
  width: 16px;
  margin-right: 4px; }

/* dome system icon end*/
/* common style */
.ui-input {
  display: inline-block;
  height: 34px;
  padding: 6px 10px 6px 6px;
  line-height: 20px;
  vertical-align: middle; }

.ui-input-search, .ui-input-search-white {
  width: 274px;
  background-origin: padding-box; }

.ui-input-search {
  padding-left: 38px;
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -780px;
  background-position: 10px -773px; }

.ui-input-search-white {
  padding-left: 20px;
  padding-bottom: 4px;
  background: url(/index/images/icon-sa7e9422d55.png) no-repeat 0 -780px;
  background-position: 0 -776px;
  border: none; }

.ui-input-full {
  width: 100%; }

.ui-label {
  display: inline-block;
  margin-right: 8px;
  margin-bottom: 8px;
  padding: 4px;
  background-color: #f5f5f5;
  border-radius: 3px; }
  .ui-label:last-child {
    margin-right: 0; }

/* text style */
.txt-safe {
  color: #4ed6b2; }

.txt-warning {
  color: #ffab00; }

.txt-success {
  color: #77bf4f; }

.txt-normal {
  color: #5dabf3; }

.txt-embed {
  color: #444; }

.txt-prompt {
  color: #ccc; }

.txt-primary {
  color: #5dabf3; }

.txt-bright {
  color: #2994e7; }

.txt-circle {
  display: inline-block;
  margin-left: 10px;
  padding: 0 14px 0 14px;
  line-height: 34px;
  font-style: normal;
  background-color: #f5f5f5;
  border-radius: 22px; }
  .txt-circle.active {
    background-color: #def0fe; }

/* text style end*/
.font-size-16 {
  font-size: 16px; }

.font-size-18 {
  font-size: 18px; }

.tool-next {
  margin-left: 10px; }

.tool-wrap-break {
  word-break: break-all; }

.tool-inline-error {
  color: #ec6d51;
  margin-left: 10px; }

.tool-align-input {
  padding-top: 6px; }

.tool-not-align-input {
  padding-top: 0px !important; }

.tool-enable-click:hover {
  cursor: pointer; }

.tool-item-next {
  margin-left: 10px; }

.full {
  width: 100%; }

.popover.top {
  word-wrap: break-word; }

.com-check-con {
  margin-right: 40px; }

.com-btn-group {
  overflow: hidden; }
  .com-btn-group .ui-btn, .com-btn-group .ui-input {
    float: left;
    border-radius: 0; }
    .com-btn-group .ui-btn:first-child, .com-btn-group .ui-input:first-child {
      border-radius: 3px 0 0 3px; }
    .com-btn-group .ui-btn:last-child, .com-btn-group .ui-input:last-child {
      border-radius: 0 3px 3px 0; }
    .com-btn-group .ui-btn:not(:last-child), .com-btn-group .ui-input:not(:last-child) {
      border-right: 0; }
  .com-btn-group .ui-btn {
    height: 34px; }

.com-tabset-scroll {
  position: relative;
  display: inline-block;
  margin-right: 10px;
  height: 42px;
  font-size: 14px;
  max-width: 0;
  overflow: hidden; }
  .com-tabset-scroll .list-back {
    width: 10000px; }

ul.com-list-tab {
  padding: 23px 0 0 52px;
  border-bottom: 1px solid #f5f5f5; }
  ul.com-list-tab li {
    display: inline-block;
    margin-right: 34px;
    border-bottom: 2px solid transparent; }
    ul.com-list-tab li:last-child {
      margin-right: 0; }
    ul.com-list-tab li.active a {
      color: #5dabf3; }
    ul.com-list-tab li.txt-error {
      color: #ec6d51; }
    ul.com-list-tab li.active, ul.com-list-tab li:hover {
      cursor: pointer;
      border-bottom: 2px solid #5dabf3; }
    ul.com-list-tab li.nav-option {
      position: absolute;
      right: 0;
      top: 0;
      width: 48px;
      height: 42px;
      margin-right: 0;
      padding-top: 24px;
      background-color: #fff; }
      ul.com-list-tab li.nav-option .icon-next {
        margin-left: 8px; }
      ul.com-list-tab li.nav-option:hover {
        border-bottom: none; }
    ul.com-list-tab li a.link-list {
      display: inline-block;
      padding-bottom: 20px; }
      ul.com-list-tab li a.link-list:focus {
        text-decoration: none; }

.com-bottom-option {
  padding-top: 50px;
  padding-bottom: 30px;
  text-align: center; }
  .com-bottom-option .com-bottom-option-con {
    position: relative;
    display: inline-block; }
    .com-bottom-option .com-bottom-option-con .txt-error {
      position: absolute;
      left: 100%;
      top: 8px;
      width: 230px;
      padding-left: 12px;
      text-align: left; }

.com-chose-repository {
  padding-top: 22px; }
  .com-chose-repository .repository {
    display: inline-block;
    width: 160px;
    height: 60px;
    margin-right: 66px;
    line-height: 60px;
    font-weight: bold;
    text-align: center;
    vertical-align: middle;
    border-radius: 3px;
    border: 2px solid transparent;
    background-color: #f5f5f5; }
    .com-chose-repository .repository:hover {
      cursor: pointer;
      border-color: #5dabf3; }
    .com-chose-repository .repository i {
      margin-right: 6px; }
    .com-chose-repository .repository .icon-gitlab {
      background: url(/index/images/lib-scbf2f341b5.png) no-repeat 0 -61px;
      height: 25px;
      width: 28px; }
    .com-chose-repository .repository .icon-github {
      background: url(/index/images/lib-scbf2f341b5.png) no-repeat 0 -33px;
      height: 23px;
      width: 28px; }
    .com-chose-repository .repository.active {
      border-color: #5dabf3;
      background-color: #fff; }

.com-page-list {
  text-align: right;
  padding: 12px 20px 12px 0; }
  .com-page-list .pageno {
    display: inline-block;
    margin-left: 6px;
    margin-right: 6px; }
    .com-page-list .pageno:hover {
      cursor: pointer; }
    .com-page-list .pageno.on {
      font-weight: bold;
      color: #5dabf3; }
  .com-page-list .page-info {
    margin-right: 10px; }

.com-label-list li {
  float: left;
  margin-right: 16px;
  margin-bottom: 18px; }
  .com-label-list li .label-item {
    display: inline-block;
    padding: 4px 8px 4px 8px;
    background-color: #f5f5f5;
    border-radius: 3px; }
    .com-label-list li .label-item .icon-cancel {
      margin-right: 4px; }

.com-list-table li.head {
  background-color: #f5f5f5; }
.com-list-table li {
  padding: 10px 12px 10px 15px;
  border-bottom: 1px solid #f5f5f5; }
  .com-list-table li:last-child {
    border-bottom: none; }
  .com-list-table li:hover .ui-table-link {
    color: #2994e7; }

.nav-tabs {
  border-bottom: 1px solid #f5f5f5;
  padding-left: 16px; }
  .nav-tabs li {
    margin-bottom: 0;
    padding: 0 27px 0 27px; }
    .nav-tabs li > a {
      border: none;
      margin-right: 0px;
      text-align: center;
      border: none;
      border-radius: 0;
      padding: 22px 5px 20px 5px; }
      .nav-tabs li > a:hover, .nav-tabs li > a:focus {
        background: none;
        color: #888; }
    .nav-tabs li.active > a, .nav-tabs li.active > a:hover, .nav-tabs li.active > a:focus {
      border: none;
      border-radius: 0; }
    .nav-tabs li:not(.nav-option).active > a, .nav-tabs li:not(.nav-option).active > a:hover, .nav-tabs li:not(.nav-option).active > a:focus {
      border-bottom: 2px solid #5dabf3;
      color: #5dabf3; }

.tool-noinfo {
  padding: 30px 0; }

/* dome custom input */
input.ui-radio,
input.ui-check {
  display: none;
  cursor: pointer;
  vertical-align: middle; }
  input.ui-radio:focus, input.ui-radio:active,
  input.ui-check:focus,
  input.ui-check:active {
    outline: none; }
  input.ui-radio + label,
  input.ui-check + label {
    cursor: pointer;
    display: inline-block;
    vertical-align: middle;
    position: relative;
    padding-left: 25px;
    font-weight: 400;
    margin-right: 10px; }
    input.ui-radio + label:before, input.ui-radio + label:after,
    input.ui-check + label:before,
    input.ui-check + label:after {
      content: " ";
      font-family: helvetica;
      display: inline-block;
      width: 18px;
      height: 18px;
      left: 0;
      bottom: 1px;
      text-align: center;
      position: absolute; }
    input.ui-radio + label:before,
    input.ui-check + label:before {
      border: 1px solid #babec8;
      background-color: #fff;
      -moz-box-shadow: inset 0 0 0 0px #77bf4f;
      -webkit-box-shadow: inset 0 0 0 0px #77bf4f;
      box-shadow: inset 0 0 0 0px #77bf4f;
      -moz-transition: all 0.3s ease-in-out;
      -o-transition: all 0.3s ease-in-out;
      -webkit-transition: all 0.3s ease-in-out;
      transition: all 0.3s ease-in-out; }
    input.ui-radio + label:after,
    input.ui-check + label:after {
      color: #fff; }
    input.ui-radio + label:empty:before, input.ui-radio + label:empty:after,
    input.ui-check + label:empty:before,
    input.ui-check + label:empty:after {
      bottom: -10px; }
  input.ui-radio.size16 + label:before, input.ui-radio.size16 + label:after,
  input.ui-check.size16 + label:before,
  input.ui-check.size16 + label:after {
    bottom: 3px; }
  input.ui-radio.size16 + label:empty:before, input.ui-radio.size16 + label:empty:after,
  input.ui-check.size16 + label:empty:before,
  input.ui-check.size16 + label:empty:after {
    bottom: -7px; }
  input.ui-radio:checked + label,
  input.ui-check:checked + label {
    color: #77bf4f; }
  input.ui-radio:checked + label:before,
  input.ui-check:checked + label:before {
    border: none;
    -moz-box-shadow: inset 0 0 0 10px #77bf4f;
    -webkit-box-shadow: inset 0 0 0 10px #77bf4f;
    box-shadow: inset 0 0 0 10px #77bf4f; }

.code-area {
  white-space: pre;
  font-family: Monaco, Consolas, 'Courier New', monospace; }

/*Radio Specific styles*/
input.ui-radio + label:before {
  -moz-border-radius: 50%;
  -webkit-border-radius: 50%;
  border-radius: 50%; }
input.ui-radio + label:hover:after, input.ui-radio:checked + label:after {
  content: '\2022';
  position: absolute;
  top: 2px;
  left: 0;
  font-size: 18px;
  line-height: 17px; }
input.ui-radio + label:empty:hover:after, input.ui-radio:checked + label:empty:after {
  top: -10px;
  left: -0.5px; }
input.ui-radio + label:hover:after {
  color: #cccccc; }
input.ui-radio:checked + label:after, input.ui-radio:checked + label:hover:after {
  top: 2px;
  color: #fff; }

/*Checkbox Specific styles*/
input.ui-check + label:before {
  -moz-border-radius: 3px;
  -webkit-border-radius: 3px;
  border-radius: 3px; }
input.ui-check + label:after {
  content: "\2713";
  color: #E5EDF5;
  line-height: 18px;
  font-size: 14px; }
input.ui-check + label:hover:after {
  color: #9BAFC9;
  -moz-transition: 0.3s;
  -o-transition: 0.3s;
  -webkit-transition: 0.3s;
  transition: 0.3s; }
input.ui-check:checked + label:after, input.ui-check:checked + label:hover:after {
  color: #fff; }

.ui-toggle {
  display: inline-block;
  width: 51px;
  height: 24px;
  margin-top: 3px;
  margin-right: 8px;
  border: none;
  box-shadow: none;
  background-color: #ccc;
  position: relative;
  -moz-border-radius: 30px;
  -webkit-border-radius: 30px;
  border-radius: 30px;
  @inlcude box-shadow(none);
  -moz-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  -webkit-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
  vertical-align: bottom; }
  .ui-toggle:after {
    content: '';
    display: inline-block;
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: #fff;
    top: 2px;
    left: 2px;
    -moz-border-radius: 50%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
    -moz-transition: all 0.2s ease-in-out;
    -o-transition: all 0.2s ease-in-out;
    -webkit-transition: all 0.2s ease-in-out;
    transition: all 0.2s ease-in-out; }
  .ui-toggle.on {
    -moz-box-shadow: inset 0 0 0 12px #77bf4f;
    -webkit-box-shadow: inset 0 0 0 12px #77bf4f;
    box-shadow: inset 0 0 0 12px #77bf4f; }
    .ui-toggle.on:after {
      left: 29px;
      background-color: #fff; }



/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=../../maps/index/css/index.css.map */
