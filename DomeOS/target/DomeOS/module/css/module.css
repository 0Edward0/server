/*
 * @description: common css variable and function
 * @version: 0.1
 */
.icon-sprite, .icon-app, .icon-cluster, .icon-deploy, .icon-doc, .icon-down, .icon-global, .icon-image, .icon-monitor, .icon-project, .icon-user {
  background-image: url(/module/images/icon-sb31f924c23.png);
  background-repeat: no-repeat; }

.icon-app {
  background-position: 0 0; }

.icon-cluster {
  background-position: 0 -24px; }

.icon-deploy {
  background-position: 0 -48px; }

.icon-doc {
  background-position: 0 -72px; }

.icon-down {
  background-position: 0 -86px; }

.icon-global {
  background-position: 0 -91px; }

.icon-image {
  background-position: 0 -115px; }

.icon-monitor {
  background-position: 0 -139px; }

.icon-project {
  background-position: 0 -163px; }

.icon-user {
  background-position: 0 -187px; }

.icon-sprite, .icon-app, .icon-cluster, .icon-deploy, .icon-doc, .icon-down, .icon-global, .icon-image, .icon-monitor, .icon-project, .icon-user, .icon-app, .icon-cluster, .icon-deploy, .icon-global, .icon-image, .icon-monitor, .icon-project, .icon-user {
  display: inline-block;
  width: 24px;
  height: 24px;
  vertical-align: middle;
  margin-right: 22px; }

.icon-doc {
  display: inline-block;
  width: 14px;
  height: 14px;
  margin-right: 4px; }

.icon-down {
  display: inline-block;
  height: 5px;
  width: 10px;
  margin-left: 8px;
  -moz-transition: rotate 0.4s;
  -o-transition: rotate 0.4s;
  -webkit-transition: rotate 0.4s;
  transition: rotate 0.4s; }
  .icon-down.up {
    -moz-transform: rotate(-90deg);
    -ms-transform: rotate(-90deg);
    -webkit-transform: rotate(-90deg);
    transform: rotate(-90deg);
    -moz-transition: rotate 0.4s;
    -o-transition: rotate 0.4s;
    -webkit-transition: rotate 0.4s;
    transition: rotate 0.4s; }

* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

*:before,
*:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

body {
  background: #6aa9f6 url(/module/images/background.jpg) no-repeat center center;
  background-size: cover;
  background-attachment: fixed;
  min-height: 560px;
  padding-top: 4%;
  padding-bottom: 2%;
  color: #fff; }

.module-con {
  position: relative;
  width: 58%;
  margin: 0 auto; }
  .module-con .log-con {
    position: absolute;
    right: 100%;
    top: 7%;
    width: 128px;
    text-align: right;
    margin-right: 8%;
    line-height: 12px; }
    .module-con .log-con img {
      vertical-align: bottom; }
    .module-con .log-con .version {
      font-size: 12px; }
  .module-con .option-con {
    position: absolute;
    left: 100%;
    top: 7%;
    width: 260px;
    margin-left: 8%; }
    .module-con .option-con .com-user-option .arrow {
      left: 19px; }
    .module-con .option-con .link-doc {
      color: #fff; }
    .module-con .option-con .user-con {
      position: relative;
      margin-top: 30px; }
      .module-con .option-con .user-con .username {
        color: #fff; }
      .module-con .option-con .user-con .com-user-option {
        left: 0; }
  .module-con .list-module {
    width: 100%;
    border-left: 1px solid rgba(255, 255, 255, 0.5);
    border-right: 1px solid rgba(255, 255, 255, 0.5); }
    .module-con .list-module li {
      border-bottom: 1px solid rgba(255, 255, 255, 0.5);
      font-size: 0; }
      .module-con .list-module li:last-child {
        border-bottom: none; }
      .module-con .list-module li .module {
        display: inline-block;
        width: 50%;
        padding: 7% 0 7% 0;
        color: #fff;
        font-size: 18px;
        text-align: center;
        border-right: 1px solid rgba(255, 255, 255, 0.5); }
        .module-con .list-module li .module:hover {
          background-color: rgba(255, 255, 255, 0.2);
          -moz-transition: background-color 0.3s;
          -o-transition: background-color 0.3s;
          -webkit-transition: background-color 0.3s;
          transition: background-color 0.3s; }
        .module-con .list-module li .module:last-child {
          border-right: none; }
        .module-con .list-module li .module h4 {
          display: inline-block;
          margin: 0;
          width: 128px;
          text-align: left; }

@media (max-width: 1500px) {
  .module-con {
    width: 51%; } }
@media (max-width: 1300px) {
  .module-con {
    width: 46%; } }
.modal-body {
  color: #888; }
  .modal-body input {
    width: 340px; }



/*# sourceMappingURL=data:application/json;charset=utf8;base64,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c3MiLCJDOi9SdWJ5MjMteDY0L2xpYi9ydWJ5L2dlbXMvMi4zLjAvZ2Vtcy9jb21wYXNzLWNvcmUtMS4wLjMvc3R5bGVzaGVldHMvY29tcGFzcy91dGlsaXRpZXMvc3ByaXRlcy9fYmFzZS5zY3NzIiwibW9kdWxlL2Nzcy9tb2R1bGUuc2NzcyIsIkM6L1J1YnkyMy14NjQvbGliL3J1YnkvZ2Vtcy8yLjMuMC9nZW1zL2NvbXBhc3MtY29yZS0xLjAuMy9zdHlsZXNoZWV0cy9jb21wYXNzL19zdXBwb3J0LnNjc3MiLCJDOi9SdWJ5MjMteDY0L2xpYi9ydWJ5L2dlbXMvMi4zLjAvZ2Vtcy9jb21wYXNzLWNvcmUtMS4wLjMvc3R5bGVzaGVldHMvY29tcGFzcy9jc3MzL190cmFuc2l0aW9uLnNjc3MiLCJDOi9SdWJ5MjMteDY0L2xpYi9ydWJ5L2dlbXMvMi4zLjAvZ2Vtcy9jb21wYXNzLWNvcmUtMS4wLjMvc3R5bGVzaGVldHMvY29tcGFzcy9jc3MzL190cmFuc2Zvcm0uc2NzcyJdLCJuYW1lcyI6W10sImZpbGUiOiJtb2R1bGUvY3NzL21vZHVsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAZGVzY3JpcHRpb246IGNvbW1vbiBjc3MgdmFyaWFibGUgYW5kIGZ1bmN0aW9uXHJcbiAqIEB2ZXJzaW9uOiAwLjFcclxuICovXHJcblxyXG4kZGVmYXVsdC1yYWRpdXM6M3B4O1xyXG4kbmF2LXdpZHRoOjIyNXB4O1xyXG4kdGhpbi1uYXYtd2lkdGg6NzBweDtcclxuJG5hdi10cmFuc2l0aW9uLWR1cmF0aW9uOjAuMXM7XHJcbiRwYWdlLXBhZGRpbmc6MjBweDtcclxuJHdpZGVyLXBhZGRpbmc6MHB4Oy8vNTJweFxyXG4kbGlzdC1wYWRkaW5nOjhweDtcclxuJHRhYmxlLWhlaWdodDo0NXB4O1xyXG4vL2FjdGl2ZTojNzdiZjRmLFxyXG4vL3NhZmU6IzRlZDZiMixcclxuLy9icmlnaHQ6IzE4OGFlMixcclxuJGRvbWUtY29sb3JzOihcclxuICAgIGRvbWU6KFxyXG4gICAgICAgIGFjdGl2ZTojNGJkMzk2LFxyXG4gICAgICAgIHdhcm5pbmc6I2Y5Yzg1MSxcclxuICAgICAgICBlcnJvcjojZjU3MDdhLFxyXG4gICAgICAgIHNhZmU6IzRiZDM5NixcclxuICAgICAgICBwcmltYXJ5OiM1ZGFiZjMsXHJcbiAgICAgICAgYnJpZ2h0OiMxODhhZTIsXHJcbiAgICAgICAgd2hpdGU6I2ZmZixcclxuICAgICAgICBhY3RpdmUtZm9udDojMTg4YWUyLFxyXG4gICAgICAgIGRpc2FibGVkOiNhYWFcclxuICAgICAgICApLFxyXG4gICAgYm9yZGVyOihcclxuICAgICAgICBkZWVwOiM5OTksXHJcbiAgICAgICAgZGVmYXVsdDojY2ZjZmNmLFxyXG4gICAgICAgIGxpZ2h0OiNlZWVcclxuICAgICAgICApLFxyXG4gICAgZm9udDooXHJcbiAgICAgICAgcHJvbXB0OiNiYmIsXHJcbiAgICAgICAgZGVmYXVsdDojODg4LFxyXG4gICAgICAgIGVtYmVkOiM0NDQsXHJcbiAgICAgICAgbGlnaHQtYmx1ZTojN2ZjMWZjXHJcbiAgICAgICAgKSxcclxuICAgIGJhY2tncm91bmQ6KFxyXG4gICAgICAgIGxpZ2h0OiNmMGYyZjUsXHJcbiAgICAgICAgcHJpbWFyeTojZGVmMGZlLFxyXG4gICAgICAgIHdoaXRlOiNmZmYsXHJcbiAgICAgICAgdGFibGUtaG92ZXItYmFja2dyb3VuZDogI2Y5ZjlmOVxyXG4gICAgICAgIClcclxuICAgICk7XHJcbiRmb250LXNpemU6KFxyXG4gICAgdGl0bGU6MjJweCxcclxuICAgIGxhcmdlOjE2cHgsXHJcbiAgICBkZWZhdWx0OjE0cHgsXHJcbiAgICBwcm9tcHQ6MTJweFxyXG4gICAgKTtcclxuJGxpZ2h0LWJvcmRlcjoxcHggc29saWQgI2YwZjJmNTtcclxuJGRlZXAtYm9yZGVyOjFweCBzb2xpZCAjZGRkO1xyXG4lZG9tZS1iYWNrZ3JvdW5ke1xyXG4gICAgQGluY2x1ZGUgYmFja2dyb3VuZChsaW5lYXItZ3JhZGllbnQobGVmdCwjNWRhYmYzLCAjNGVkNmIyKSk7IFxyXG59XHJcbiVub3dyYXB7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgdGV4dC1vdmVyZmxvdzplbGxpcHNpcztcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbn1cclxuJW5vYmFja3tcclxuICAgICYsJjpmb2N1cywmOmxpbmssJjp2aXNpdGVkLCY6aG92ZXIsJjphY3RpdmV7XHJcbiAgICAgICAgYmFja2dyb3VuZDpub25lO1xyXG4gICAgICAgIGJvcmRlcjpub25lO1xyXG4gICAgICAgIG91dGxpbmU6IG5vbmUgIWltcG9ydGFudDtcclxuICAgICAgICBib3gtc2hhZG93OiBub25lO1xyXG4gICAgfVxyXG59XHJcbiVjdXJzb3J7XHJcbiAgICAmOmhvdmVye1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIH1cclxufVxyXG4ldmVydGljYWwtbWlkZGxle1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxufVxyXG4vLyBjb21tb24gIGZ1bmN0aW9uXHJcbkBmdW5jdGlvbiBmb250LXNpemUoJGZvcm1hdCl7XHJcbiAgICBAaWYgbWFwLWhhcy1rZXkoJGZvbnQtc2l6ZSwkZm9ybWF0KXtcclxuICAgICAgICBAcmV0dXJuIG1hcC1nZXQoJGZvbnQtc2l6ZSwkZm9ybWF0KTtcclxuICAgIH1cclxuICAgIEB3YXJuIFwiTm8gY29sb3IgZm91bmQgZm9yICRmb250LXNpemUgaW4gI3skZm9ybWF0fSBtYXAuXCI7XHJcbn1cclxuQGZ1bmN0aW9uIGRvbWUtY29sb3IoJG1hcCwkY29sb3Ipe1xyXG4gICAgQGlmIG1hcC1oYXMta2V5KCRkb21lLWNvbG9ycywkbWFwKXtcclxuICAgICAgICBAaWYgbWFwLWhhcy1rZXkobWFwLWdldCgkZG9tZS1jb2xvcnMsJG1hcCksJGNvbG9yKXtcclxuICAgICAgICAgICAgQHJldHVybiBtYXAtZ2V0KG1hcC1nZXQoJGRvbWUtY29sb3JzLCRtYXApLCRjb2xvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEB3YXJuIFwiTm8gY29sb3IgZm91bmQgZm9yICN7JGNvbG9yfSBpbiAjeyRtYXB9IG1hcC5cIjtcclxuICAgIH1cclxuICAgIEB3YXJuIFwiTm8gY29sb3IgZm91bmQgZm9yICN7JG1hcH0gaW4gJGRvbWUtY29sb3JzIG1hcC5cIjtcclxufVxyXG5AZnVuY3Rpb24gY29sb3IoJG1hcCwkY29sb3Ipe1xyXG4gICAgQGlmIG1hcC1oYXMta2V5KCRtYXAsJGNvbG9yKXtcclxuICAgICAgICBAcmV0dXJuIG1hcC1nZXQoJG1hcCwkY29sb3IpO1xyXG4gICAgfVxyXG4gICAgQHdhcm4gXCJObyBjb2xvciBmb3VuZCBmb3IgI3skY29sb3J9IGluICN7JG1hcH0gbWFwLlwiO1xyXG59XHJcbkBtaXhpbiBnZXQtc3ByaXRlKCRpY29uLCRuYW1lLCRpcy1ibG9jayl7XHJcbiAgICBiYWNrZ3JvdW5kOiBzcHJpdGUtdXJsKCRpY29uKSBuby1yZXBlYXQgc3ByaXRlLXBvc2l0aW9uKCRpY29uLCAkbmFtZSk7XHJcbiAgICBAaWYgJGlzLWJsb2Nre1xyXG4gICAgICAgIEBleHRlbmQgJXZlcnRpY2FsLW1pZGRsZTtcclxuICAgICAgICBAaW5jbHVkZSBzcHJpdGUtZGltZW5zaW9ucygkaWNvbiwgJG5hbWUpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBrZXlmcmFtZXMgbWl4aW5cclxuQG1peGluIHNldEtleWZyYW1lcygkbmFtZSkge1xyXG4gICAgQGluY2x1ZGUga2V5ZnJhbWVzKCRuYW1lKXtcclxuICAgICAgICBAY29udGVudDtcclxuICAgIH1cclxufVxyXG4iLCIvLyBEZXRlcm1pbmVzIHRob3NlIHN0YXRlcyBmb3Igd2hpY2ggeW91IHdhbnQgdG8gZW5hYmxlIG1hZ2ljIHNwcml0ZSBzZWxlY3RvcnNcbiRzcHJpdGUtc2VsZWN0b3JzOiBob3ZlciwgdGFyZ2V0LCBhY3RpdmUsIGZvY3VzICFkZWZhdWx0O1xuXG4vLyBTZXQgdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgYW4gZWxlbWVudCB0byB0aGUgb3JpZ2luYWxcbi8vIGRpbWVuc2lvbnMgb2YgYW4gaW1hZ2UgYmVmb3JlIGl0IHdhcyBpbmNsdWRlZCBpbiB0aGUgc3ByaXRlLlxuQG1peGluIHNwcml0ZS1kaW1lbnNpb25zKCRtYXAsICRzcHJpdGUpIHtcbiAgaGVpZ2h0OiBpbWFnZS1oZWlnaHQoc3ByaXRlLWZpbGUoJG1hcCwgJHNwcml0ZSkpO1xuICB3aWR0aDogaW1hZ2Utd2lkdGgoc3ByaXRlLWZpbGUoJG1hcCwgJHNwcml0ZSkpO1xufVxuXG4vLyBTZXQgdGhlIGJhY2tncm91bmQgcG9zaXRpb24gb2YgdGhlIGdpdmVuIHNwcml0ZSBgJG1hcGAgdG8gZGlzcGxheSB0aGVcbi8vIHNwcml0ZSBvZiB0aGUgZ2l2ZW4gYCRzcHJpdGVgIG5hbWUuIFlvdSBjYW4gbW92ZSB0aGUgaW1hZ2UgcmVsYXRpdmUgdG8gaXRzXG4vLyBuYXR1cmFsIHBvc2l0aW9uIGJ5IHBhc3NpbmcgYCRvZmZzZXQteGAgYW5kIGAkb2Zmc2V0LXlgLlxuLy8gVGhlIGJhY2tncm91bmQtcG9zaXRpb24gd2lsbCBiZSByZXR1cm5lZCBpbiBwaXhlbHMuIEJ5IHBhc3NpbmcgYHRydWVcbi8vIGZvciBgJHVzZV9wZXJjZW50YWdlc2AsIHlvdSBnZXQgcGVyY2VudGFnZXMgaW5zdGVhZC5cbkBtaXhpbiBzcHJpdGUtYmFja2dyb3VuZC1wb3NpdGlvbigkbWFwLCAkc3ByaXRlLCAkb2Zmc2V0LXg6IDAsICRvZmZzZXQteTogMCxcbiR1c2UtcGVyY2VudGFnZXM6IGZhbHNlKSB7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IHNwcml0ZS1wb3NpdGlvbigkbWFwLCAkc3ByaXRlLCAkb2Zmc2V0LXgsICRvZmZzZXQteSxcbiAgJHVzZS1wZXJjZW50YWdlcyk7XG59XG5cblxuLy8gRGV0ZXJtaW5lcyBpZiB5b3Ugd2FudCB0byBpbmNsdWRlIG1hZ2ljIHNlbGVjdG9ycyBpbiB5b3VyIHNwcml0ZXNcbiRkaXNhYmxlLW1hZ2ljLXNwcml0ZS1zZWxlY3RvcnM6IGZhbHNlICFkZWZhdWx0O1xuXG4vLyBTZXQgdGhpcyB0byB1bmRlcnNjb3JlIGlmIHlvdSBwcmVmZXJcbiRkZWZhdWx0LXNwcml0ZS1zZXBhcmF0b3I6IFwiLVwiICFkZWZhdWx0O1xuXG4vLyBJbmNsdWRlIHRoZSBwb3NpdGlvbiBhbmQgKG9wdGlvbmFsbHkpIGRpbWVuc2lvbnMgb2YgdGhpcyBgJHNwcml0ZWBcbi8vIGluIHRoZSBnaXZlbiBzcHJpdGUgYCRtYXBgLiBUaGUgc3ByaXRlIHVybCBzaG91bGQgY29tZSBmcm9tIGVpdGhlciBhIGJhc2Vcbi8vIGNsYXNzIG9yIHlvdSBjYW4gc3BlY2lmeSB0aGUgYHNwcml0ZS11cmxgIGV4cGxpY2l0bHkgbGlrZSB0aGlzOlxuLy9cbi8vICAgICBiYWNrZ3JvdW5kOiAkbWFwIG5vLXJlcGVhdDtcbkBtaXhpbiBzcHJpdGUoJG1hcCwgJHNwcml0ZSwgJGRpbWVuc2lvbnM6IGZhbHNlLCAkb2Zmc2V0LXg6IDAsICRvZmZzZXQteTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVzZS1wZXJjZW50YWdlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1c2UtbWFnaWMtc2VsZWN0b3JzOiBub3QgJGRpc2FibGUtbWFnaWMtc3ByaXRlLXNlbGVjdG9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNlcGFyYXRvcjogJGRlZmF1bHQtc3ByaXRlLXNlcGFyYXRvcikge1xuICBAaW5jbHVkZSBzcHJpdGUtYmFja2dyb3VuZC1wb3NpdGlvbigkbWFwLCAkc3ByaXRlLCAkb2Zmc2V0LXgsICRvZmZzZXQteSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVzZS1wZXJjZW50YWdlcyk7XG4gIEBpZiAkZGltZW5zaW9ucyB7XG4gICAgQGluY2x1ZGUgc3ByaXRlLWRpbWVuc2lvbnMoJG1hcCwgJHNwcml0ZSk7XG4gIH1cbiAgQGlmICR1c2UtbWFnaWMtc2VsZWN0b3JzIHtcbiAgICBAaW5jbHVkZSBzcHJpdGUtc2VsZWN0b3JzKCRtYXAsICRzcHJpdGUsICRzcHJpdGUsICRvZmZzZXQteCwgJG9mZnNldC15LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVzZS1wZXJjZW50YWdlcywgJHNlcGFyYXRvcik7XG4gIH1cbn1cblxuLy8gSW5jbHVkZSB0aGUgc2VsZWN0b3JzIGZvciB0aGUgYCRzcHJpdGVgIGdpdmVuIHRoZSBgJG1hcGAgYW5kIHRoZSBcbi8vIGAkZnVsbC1zcHJpdGUtbmFtZWBcbi8vIEBwcml2YXRlXG5AbWl4aW4gc3ByaXRlLXNlbGVjdG9ycygkbWFwLCAkc3ByaXRlLW5hbWUsICRmdWxsLXNwcml0ZS1uYW1lLCAkb2Zmc2V0LXg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAkb2Zmc2V0LXk6IDAsICR1c2UtcGVyY2VudGFnZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJHNlcGFyYXRvcjogJGRlZmF1bHQtc3ByaXRlLXNlcGFyYXRvcikge1xuICBAZWFjaCAkc3RhdGUgaW4gJHNwcml0ZS1zZWxlY3RvcnMge1xuICAgICRzcHJpdGUtY2xhc3M6IFwiI3skZnVsbC1zcHJpdGUtbmFtZX0jeyRzZXBhcmF0b3J9I3skc3RhdGV9XCI7XG4gICAgQGlmIHNwcml0ZV9oYXNfc2VsZWN0b3IoJG1hcCwgJHNwcml0ZS1uYW1lLCAkc3RhdGUpIHtcbiAgICAgIEBpZiBzcHJpdGVfaGFzX3ZhbGlkX3NlbGVjdG9yKCRzcHJpdGUtY2xhc3MpIHtcbiAgICAgICAgJjojeyRzdGF0ZX0sICYuI3skc3ByaXRlLWNsYXNzfSB7XG4gICAgICAgICAgICBAaW5jbHVkZSBzcHJpdGUtYmFja2dyb3VuZC1wb3NpdGlvbigkbWFwLCBzcHJpdGVfc2VsZWN0b3JfZmlsZSgkbWFwLCAkc3ByaXRlLW5hbWUsICRzdGF0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2Zmc2V0LXgsICRvZmZzZXQteSwgJHVzZS1wZXJjZW50YWdlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gR2VuZXJhdGVzIGEgY2xhc3MgZm9yIGVhY2ggc3BhY2Ugc2VwYXJhdGVkIG5hbWUgaW4gYCRzcHJpdGUtbmFtZXNgLlxuLy8gVGhlIGNsYXNzIHdpbGwgYmUgb2YgdGhlIGZvcm0gLjxtYXAtbmFtZT4tPHNwcml0ZS1uYW1lPi5cbi8vXG4vLyBJZiBhIGJhc2UgY2xhc3MgaXMgcHJvdmlkZWQsIHRoZW4gZWFjaCBjbGFzcyB3aWxsIGV4dGVuZCBpdC5cbi8vXG4vLyBJZiBgJGRpbWVuc2lvbnNgIGlzIGB0cnVlYCwgdGhlIHNwcml0ZSBkaW1lbnNpb25zIHdpbGwgc3BlY2lmaWVkLlxuLy8gUG9zaXRpb25zIGFyZSByZXR1cm5lZCBpbiBwaXhlbCB1bml0cy4gU2V0IGAkdXNlX3BlcmNlbnRhZ2VzYCB0byB0cnVlIHRvXG4vLyBpbnN0ZWFkIGdldCBwZXJjZW50YWdlcy5cbkBtaXhpbiBzcHJpdGVzKCRtYXAsICRzcHJpdGUtbmFtZXMsICRiYXNlLWNsYXNzOiBmYWxzZSwgJGRpbWVuc2lvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgJHByZWZpeDogc3ByaXRlLW1hcC1uYW1lKCRtYXApLCAkb2Zmc2V0LXg6IDAsICRvZmZzZXQteTogMCxcbiAgICAgICAgICAgICAgICR1c2UtcGVyY2VudGFnZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgJHNlcGFyYXRvcjogJGRlZmF1bHQtc3ByaXRlLXNlcGFyYXRvcikge1xuICBAZWFjaCAkc3ByaXRlLW5hbWUgaW4gJHNwcml0ZS1uYW1lcyB7XG4gICAgQGlmIHNwcml0ZV9kb2VzX25vdF9oYXZlX3BhcmVudCgkbWFwLCAkc3ByaXRlLW5hbWUpIHtcbiAgICAgICRmdWxsLXNwcml0ZS1uYW1lOiBcIiN7JHByZWZpeH0jeyRzZXBhcmF0b3J9I3skc3ByaXRlLW5hbWV9XCI7XG4gICAgICBAaWYgc3ByaXRlX2hhc192YWxpZF9zZWxlY3RvcigkZnVsbC1zcHJpdGUtbmFtZSkge1xuICAgICAgICAuI3skZnVsbC1zcHJpdGUtbmFtZX0ge1xuICAgICAgICAgIEBpZiAkYmFzZS1jbGFzcyB7IEBleHRlbmQgI3skYmFzZS1jbGFzc307IH1cbiAgICAgICAgICBAaW5jbHVkZSBzcHJpdGUoJG1hcCwgJHNwcml0ZS1uYW1lLCAkZGltZW5zaW9ucywgJG9mZnNldC14LCAkb2Zmc2V0LXksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAkdXNlLXBlcmNlbnRhZ2VzLCAkc2VwYXJhdG9yOiAkc2VwYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiQGltcG9ydCBcImNvbXBhc3MvY3NzM1wiO1xyXG5AaW1wb3J0IFwiY29tbW9uL2Nzcy9jb21tb24uc2Nzc1wiO1xyXG5AaW1wb3J0IFwiL21vZHVsZS9pbWFnZXMvaWNvbi8qLnBuZ1wiO1xyXG5AaW5jbHVkZSBhbGwtaWNvbi1zcHJpdGVzO1xyXG5cclxuLmljb24tc3ByaXRlLCAuaWNvbi1hcHAsIC5pY29uLWNsdXN0ZXIsIC5pY29uLWRlcGxveSwgLmljb24tZ2xvYmFsLCAuaWNvbi1pbWFnZSwgLmljb24tbW9uaXRvciwgLmljb24tcHJvamVjdCwgLmljb24tdXNlcntcclxuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblx0d2lkdGg6IDI0cHg7XHJcblx0aGVpZ2h0OiAyNHB4O1xyXG5cdHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcblx0bWFyZ2luLXJpZ2h0OiAyMnB4O1xyXG59XHJcbi5pY29uLWRvY3tcclxuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblx0d2lkdGg6IDE0cHg7XHJcblx0aGVpZ2h0OiAxNHB4O1xyXG5cdG1hcmdpbi1yaWdodDogNHB4O1xyXG59XHJcbi5pY29uLWRvd257XHJcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrOyBcclxuXHRoZWlnaHQ6IDVweDtcclxuXHR3aWR0aDogMTBweDtcclxuXHRtYXJnaW4tbGVmdDogOHB4O1xyXG5cdEBpbmNsdWRlIHRyYW5zaXRpb24ocm90YXRlIC40cyk7XHJcblx0Ji51cHtcclxuXHRcdEBpbmNsdWRlIHJvdGF0ZSgtOTBkZWcpO1xyXG5cdFx0QGluY2x1ZGUgdHJhbnNpdGlvbihyb3RhdGUgLjRzKTtcclxuXHR9XHJcbn1cclxuJGJvcmRlcjoxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwuNSk7XHJcbioge1xyXG5cdC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHQtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcclxufVxyXG4qOmJlZm9yZSxcclxuKjphZnRlciB7XHJcblx0LXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cdC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcbiRwYWRkaW5nOjclO1xyXG5ib2R5e1xyXG5cdGJhY2tncm91bmQ6ICM2YWE5ZjYgdXJsKC9tb2R1bGUvaW1hZ2VzL2JhY2tncm91bmQuanBnKSBuby1yZXBlYXQgY2VudGVyIGNlbnRlcjtcclxuXHRiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG5cdGJhY2tncm91bmQtYXR0YWNobWVudDpmaXhlZDtcclxuXHRtaW4taGVpZ2h0OiA1NjBweDtcclxuXHRwYWRkaW5nLXRvcDogNCU7XHJcblx0cGFkZGluZy1ib3R0b206IDIlO1xyXG5cdGNvbG9yOiNmZmY7XHJcbn1cclxuLm1vZHVsZS1jb257XHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdHdpZHRoOiA1OCU7XHJcblx0bWFyZ2luOiAwIGF1dG87XHJcblx0LmxvZy1jb257XHJcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0XHRyaWdodDoxMDAlO1xyXG5cdFx0dG9wOiAkcGFkZGluZztcclxuXHRcdHdpZHRoOiAxMjhweDtcclxuXHRcdHRleHQtYWxpZ246IHJpZ2h0O1xyXG5cdFx0bWFyZ2luLXJpZ2h0OiA4JTtcclxuXHRcdGxpbmUtaGVpZ2h0OiAxMnB4O1xyXG5cdFx0aW1ne1xyXG5cdFx0XHR2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xyXG5cdFx0fVxyXG5cdFx0LnZlcnNpb257XHJcblx0XHRcdGZvbnQtc2l6ZTogMTJweDtcclxuXHRcdH1cclxuXHR9XHJcblx0Lm9wdGlvbi1jb257XHJcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0XHRsZWZ0OiAxMDAlO1xyXG5cdFx0dG9wOiAkcGFkZGluZztcclxuXHRcdHdpZHRoOiAyNjBweDtcclxuXHRcdG1hcmdpbi1sZWZ0OiA4JTtcclxuXHRcdC5jb20tdXNlci1vcHRpb257XHJcblx0XHRcdC5hcnJvd3tcclxuXHRcdFx0XHRsZWZ0OiAxOXB4O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQubGluay1kb2N7XHJcblx0XHRcdGNvbG9yOiAjZmZmO1xyXG5cdFx0fVxyXG5cdFx0LnVzZXItY29ue1xyXG5cdFx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcblx0XHRcdG1hcmdpbi10b3A6IDMwcHg7XHJcblx0XHRcdC51c2VybmFtZSB7XHJcblx0XHRcdFx0Y29sb3I6ICNmZmY7XHJcblx0XHRcdH1cclxuXHRcdFx0LmNvbS11c2VyLW9wdGlvbntcclxuXHRcdFx0XHRsZWZ0OiAwO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdC5saXN0LW1vZHVsZXtcclxuXHRcdHdpZHRoOiAxMDAlO1xyXG5cdFx0Ym9yZGVyLWxlZnQ6ICRib3JkZXI7XHJcblx0XHRib3JkZXItcmlnaHQ6ICRib3JkZXI7XHJcblx0XHRsaXtcclxuXHRcdFx0Ym9yZGVyLWJvdHRvbTogICRib3JkZXI7XHJcblx0XHRcdGZvbnQtc2l6ZTogMDtcclxuXHRcdFx0JjpsYXN0LWNoaWxke1xyXG5cdFx0XHRcdGJvcmRlci1ib3R0b206IG5vbmU7XHJcblx0XHRcdH1cclxuXHRcdFx0Lm1vZHVsZXtcclxuXHRcdFx0XHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblx0XHRcdFx0d2lkdGg6IDUwJTtcclxuXHRcdFx0XHRwYWRkaW5nOiAkcGFkZGluZyAwICRwYWRkaW5nIDA7XHJcblx0XHRcdFx0Y29sb3I6ICNmZmY7XHJcblx0XHRcdFx0Zm9udC1zaXplOiAxOHB4O1xyXG5cdFx0XHRcdHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHRcdFx0XHRib3JkZXItcmlnaHQ6ICAkYm9yZGVyO1xyXG5cdFx0XHRcdCY6aG92ZXJ7XHJcblx0XHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LC4yKTtcclxuXHRcdFx0XHRcdEBpbmNsdWRlIHRyYW5zaXRpb24oYmFja2dyb3VuZC1jb2xvciAuM3MpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQmOmxhc3QtY2hpbGR7XHJcblx0XHRcdFx0XHRib3JkZXItcmlnaHQ6ICBub25lO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRoNHtcclxuXHRcdFx0XHRcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuXHRcdFx0XHRcdG1hcmdpbjogMDtcclxuXHRcdFx0XHRcdHdpZHRoOiAxMjhweDtcclxuXHRcdFx0XHRcdHRleHQtYWxpZ246IGxlZnQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbkBtZWRpYSAobWF4LXdpZHRoOiAxNTAwcHgpIHtcclxuXHRcdC5tb2R1bGUtY29ue1xyXG5cdFx0XHR3aWR0aDogNTElO1xyXG5cdFx0fVxyXG59XHJcbkBtZWRpYSAobWF4LXdpZHRoOiAxMzAwcHgpIHtcclxuXHRcdC5tb2R1bGUtY29ue1xyXG5cdFx0XHR3aWR0aDogNDYlO1xyXG5cdFx0fVxyXG59XHJcbi5tb2RhbC1ib2R5e1xyXG5cdGNvbG9yOiBkb21lLWNvbG9yKGZvbnQsZGVmYXVsdCk7XHJcblx0aW5wdXR7XHJcblx0XHR3aWR0aDogMzQwcHg7XHJcblx0fVxyXG59IiwiLy8gTWFwIG9mIGNvbXBhc3MgZXh0ZW5zaW9ucyB0aGF0IGFyZSBsb2FkZWQuIFRoZSB2YWx1ZSB3aWxsIGVpdGhlciBiZVxuLy8gdGhlIHZlcnNpb24gb2YgdGhlIGV4dGVuc2lvbiBvciBgdHJ1ZWAgaWYgdGhlIHZlcnNpb24gaXMgdW5rbm93bi5cbiRjb21wYXNzLWV4dGVuc2lvbnM6IGNvbXBhc3MtZXh0ZW5zaW9ucygpICFkZWZhdWx0O1xuXG4vLyBUaGUgbGlzdCBvZiBicm93c2VycyB5b3Ugd2FudCB0byBzdXBwb3J0LlxuLy8gRGVmYXVsdHMgdG8gYWxsLlxuJHN1cHBvcnRlZC1icm93c2VyczogYnJvd3NlcnMoKSAhZGVmYXVsdDtcblxuLy8gVGhlIGJyb3dzZXIgdXNhZ2UgdGhyZXNob2xkIGZvciBmZWF0dXJlcyB0aGF0IGdyYWNlZnVsbHkgZGVncmFkZVxuLy8gRGVmYXVsdHMgdG8gMSB1c2VyIGluIDEsMDAwLlxuJGdyYWNlZnVsLXVzYWdlLXRocmVzaG9sZDogMC4xICFkZWZhdWx0O1xuXG4vLyBUaGUgYnJvd3NlciB1c2FnZSB0aHJlc2hvbGQgZm9yIGZlYXR1cmVzIHRoYXQgY2Fubm90IGRlZ3JhZGUgZ3JhY2VmdWxseVxuLy8gRGVmYXVsdHMgdG8gMSB1c2VyIGluIDEwLDAwMC5cbiRjcml0aWNhbC11c2FnZS10aHJlc2hvbGQ6IDAuMDEgIWRlZmF1bHQ7XG5cbi8vIFNldCB0aGlzIHRvIHRydWUgdG8gZ2VuZXJhdGUgY29tbWVudHMgdGhhdCB3aWxsIGV4cGxhaW4gd2h5IGEgcHJlZml4IHdhcyBpbmNsdWRlZCBvciBvbWl0dGVkLlxuJGRlYnVnLWJyb3dzZXItc3VwcG9ydDogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIE1pbmltdW0gYnJvd3NlciB2ZXJzaW9ucyB0aGF0IG11c3QgYmUgc3VwcG9ydGVkLlxuLy8gVGhlIGtleXMgb2YgdGhpcyBtYXAgYXJlIGFueSB2YWxpZCBicm93c2VyIGFjY29yZGluZyB0byBgYnJvd3NlcnMoKWAuXG4vLyBUaGUgdmFsdWVzIG9mIHRoaXMgbWFwIGFyZSB0aGUgbWluIHZlcnNpb24gdGhhdCBpcyB2YWxpZCBmb3IgdGhhdCBicm93c2VyXG4vLyBhY2NvcmRpbmcgdG8gYGJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIpYFxuJGJyb3dzZXItbWluaW11bS12ZXJzaW9uczogKFxuICAnY2hyb21lJzogIG51bGwsXG4gICdmaXJlZm94JzogbnVsbCxcbiAgJ2llJzogICAgICBudWxsLFxuICAnc2FmYXJpJzogIG51bGwsXG4gICdvcGVyYSc6ICAgbnVsbFxuKSAhZGVmYXVsdDtcblxuXG4vLyBAcHJpdmF0ZVxuJGRlZmF1bHQtY2FwYWJpbGl0eS1vcHRpb25zOiAoXG4gIChmdWxsLXN1cHBvcnQ6IHRydWUpLFxuICAocGFydGlhbC1zdXBwb3J0OiB0cnVlKVxuKTtcblxuLy8gV2hlbiBhIHByZWZpeCBpbiBpbiBjb250ZXh0LCBidXQgdGhlcmUgaXMgbm8gY3VycmVudCBwcmVmaXhcbi8vIFRoYXQgY29udGV4dCBpcyByZWNvcmRlZCBoZXJlIHNvIG90aGVyIHByZWZpeGVzIGNhbiBiZSBhdm9pZGVkLlxuJHByZWZpeC1jb250ZXh0OiBudWxsO1xuXG4vLyBXaGVuIGEgcHJlZml4IGlzIGluIGEgc2VsZWN0b3Igb3IgZGlyZWN0aXZlIHNjb3BlLCB0aGlzIGlzIHNldCB0byB0aGVcbi8vIGN1cnJlbnQgcHJlZml4IHZhbHVlLiAgV2hlbiBgbnVsbGAsIGVpdGhlciB0aGVyZSBpcyBubyBwcmVmaXggaW4gc2NvcGVcbi8vIG9yIHRoZSBvZmZpY2lhbCBwcmVmaXggaXMgYmVpbmcgcmVuZGVyZWQuIFRoZSBgJHByZWZpeC1jb250ZXh0YFxuLy8gdmFyaWFibGUgY2FuIGJlIHVzZWQgdG8gbWFrZSB0aGF0IGRpc3RpbmN0aW9uLlxuJGN1cnJlbnQtcHJlZml4OiBudWxsO1xuXG4vLyBXaGVuIGluIGEgY29udGV4dCB0aGF0IG9ubHkgZXhpc3RzIGluIGEgcGFydGljdWxhciB2ZXJzaW9uXG4vLyB0aGlzIHZhcmlhYmxlIGlzIHNldCB0byB0aG9zZSB2ZXJzaW9ucy5cbiRjdXJyZW50LWJyb3dzZXItdmVyc2lvbnM6ICgpO1xuXG4vLyBUaGUgbGVnYWN5IHN1cHBvcnQgQ1NTIDIuMSBTZWxlY3RvcnMuXG4vLyBEZWZhdWx0cyB0byB0aGUgJGNyaXRpY2FsLXVzYWdlLXRocmVzaG9sZC5cbiRjc3Mtc2VsMi1zdXBwb3J0LXRocmVzaG9sZDogJGNyaXRpY2FsLXVzYWdlLXRocmVzaG9sZCAhZGVmYXVsdDtcblxuLy8gQ2hlY2sgaWYgdGhlIGJyb3dzZXIgaXMgaW4gc2NvcGUgZ2l2ZW4gdGhlIGJyb3dzZXIgc3VwcG9ydCBhbmQgY3VycmVudCBwcmVmaXggbWluaW11bXMuXG5AZnVuY3Rpb24gYnJvd3Nlci1vdXQtb2Ytc2NvcGUoJGJyb3dzZXIsICR2ZXJzaW9uOiBudWxsKSB7XG4gIEBpZiBub3QgaW5kZXgoJHN1cHBvcnRlZC1icm93c2VycywgJGJyb3dzZXIpIHtcbiAgICBAaWYgJGRlYnVnLWJyb3dzZXItc3VwcG9ydCB7XG4gICAgICBAcmV0dXJuIFwiI3skYnJvd3Nlcn0gaXMgbm90IGxpc3RlZCBhcyBhIHN1cHBvcnRlZCBicm93c2VyLlwiXG4gICAgfSBAZWxzZSB7XG4gICAgICBAcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IEBlbHNlIGlmIG5vdCAoJGN1cnJlbnQtcHJlZml4ID09IG51bGwgb3IgJGN1cnJlbnQtcHJlZml4ID09IGJyb3dzZXItcHJlZml4KCRicm93c2VyKSkge1xuICAgIEBpZiAkZGVidWctYnJvd3Nlci1zdXBwb3J0IHtcbiAgICAgIEByZXR1cm4gXCIjeyRicm93c2VyfSAjeyR2ZXJzaW9ufSBpcyBpbmNvbXBhdGlibGUgd2l0aCAjeyRjdXJyZW50LXByZWZpeH0uXCJcbiAgICB9IEBlbHNlIHtcbiAgICAgIEByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgJGN1cnJlbnQtcmFuZ2U6IG1hcC1nZXQoJGN1cnJlbnQtYnJvd3Nlci12ZXJzaW9ucywgJGJyb3dzZXIpO1xuICAkY3VycmVudC1taW46IGlmKCRjdXJyZW50LXJhbmdlLCBudGgoJGN1cnJlbnQtcmFuZ2UsIDEpLCBudWxsKTtcbiAgJGN1cnJlbnQtbWF4OiBpZigkY3VycmVudC1yYW5nZSwgbnRoKCRjdXJyZW50LXJhbmdlLCAyKSwgbnVsbCk7XG4gIEBpZiBub3QgKCR2ZXJzaW9uIGFuZCAkY3VycmVudC1tYXgpIHtcbiAgICAvLyBXZSBkb24ndCBoYXZlIGFueSB2ZXJzaW9ucyB0byBjb21wYXJlXG4gICAgQHJldHVybiBmYWxzZTtcbiAgfSBAZWxzZSB7XG4gICAgLy8gSWYgdGhlIHZlcnNpb24gaXMgbGVzcyB0aGFuIHRoZSBjdXJyZW50IG1pbiwgaXQgaXMgbm90IHN1cHBvcnRlZFxuICAgICR0b28tb2xkOiBjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICR2ZXJzaW9uLCAkY3VycmVudC1taW4pIDwgMDtcbiAgICAkdG9vLW5ldzogY29tcGFyZS1icm93c2VyLXZlcnNpb25zKCRicm93c2VyLCAkdmVyc2lvbiwgJGN1cnJlbnQtbWF4KSA+IDA7XG4gICAgQGlmICR0b28tb2xkIG9yICR0b28tbmV3IHtcbiAgICAgIEBpZiAkZGVidWctYnJvd3Nlci1zdXBwb3J0IHtcbiAgICAgICAgQHJldHVybiBcIlRoZSBjdXJyZW50IHNjb3BlIG9ubHkgd29ya3Mgd2l0aCAje2Rpc3BsYXktYnJvd3Nlci1yYW5nZSgkYnJvd3NlciwgJGN1cnJlbnQtbWluLCAkY3VycmVudC1tYXgpfS5cIjtcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICBAcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBAZWxzZSB7XG4gICAgICBAcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG4vLyBDaGVjayB3aGV0aGVyIHRoZSBicm93c2VyIGlzIHN1cHBvcnRlZCBhY2NvcmRpbmcgdG8gdGhlIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIGRlY2xhcmVkIG1pbmltdW0gc3VwcG9ydCBhbmQgdXNhZ2UgdGhyZXNob2xkcy5cbkBmdW5jdGlvbiBzdXBwb3J0LWxlZ2FjeS1icm93c2VyKCRicm93c2VyLCAkbWluLXZlcnNpb24sICRtYXgtdmVyc2lvbjogbnVsbCwgJHRocmVzaG9sZDogJGNyaXRpY2FsLXVzYWdlLXRocmVzaG9sZCkge1xuICBAaWYgbm90IGluZGV4KCRzdXBwb3J0ZWQtYnJvd3NlcnMsICRicm93c2VyKSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBDaGVjayBhZ2Fpc3QgdXNhZ2Ugc3RhdHMgYW5kIGRlY2xhcmVkIG1pbmltdW1zXG4gICRtaW4tcmVxdWlyZWQtdmVyc2lvbjogbWFwLWdldCgkYnJvd3Nlci1taW5pbXVtLXZlcnNpb25zLCAkYnJvd3Nlcik7XG4gICR1c2FnZTogaWYoJG1heC12ZXJzaW9uLFxuICAgICAgICAgICAgIG9taXR0ZWQtdXNhZ2UoJGJyb3dzZXIsICRtaW4tdmVyc2lvbiwgJG1heC12ZXJzaW9uKSxcbiAgICAgICAgICAgICBvbWl0dGVkLXVzYWdlKCRicm93c2VyLCAkbWluLXZlcnNpb24pKTtcbiAgQHJldHVybiAkdXNhZ2UgPiAkdGhyZXNob2xkIG9yXG4gICAgICAgICAgKCRtaW4tcmVxdWlyZWQtdmVyc2lvbiBhbmRcbiAgICAgICAgICAgY29tcGFyZS1icm93c2VyLXZlcnNpb25zKCRicm93c2VyLCAkbWF4LXZlcnNpb24gb3IgJG1pbi12ZXJzaW9uLCAkbWluLXJlcXVpcmVkLXZlcnNpb24pID49IDApO1xufVxuXG4vLyBJbmNsdWRlIGNvbnRlbnQgZm9yIGEgbGVnYWN5IGJyb3dzZXJcbi8vIFZlcnNpb24gY2FuIGJlIGEgc2luZ2xlIHZlcnNpb24gc3RyaW5nIG9yIGEgbGlzdCBvZiB2ZXJzaW9ucyBvcmRlcmVkIGZyb20gb2xkZXN0IHRvIG5ld2VzdC5cbkBtaXhpbiBmb3ItbGVnYWN5LWJyb3dzZXIoJGJyb3dzZXIsICRtaW4tdmVyc2lvbiwgJG1heC12ZXJzaW9uOiAkbWluLXZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICR0aHJlc2hvbGQ6ICRjcml0aWNhbC11c2FnZS10aHJlc2hvbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICRyYW5nZXM6ICgkYnJvd3NlcjogJG1pbi12ZXJzaW9uICRtYXgtdmVyc2lvbikpIHtcbiAgQGlmIG5vdCBicm93c2VyLW91dC1vZi1zY29wZSgkYnJvd3NlciwgJG1heC12ZXJzaW9uKSBhbmRcbiAgICAgIHN1cHBvcnQtbGVnYWN5LWJyb3dzZXIoJGJyb3dzZXIsICRtaW4tdmVyc2lvbiwgJG1heC12ZXJzaW9uLCAkdGhyZXNob2xkKVxuICB7XG4gICAgQGlmICRkZWJ1Zy1icm93c2VyLXN1cHBvcnQge1xuICAgICAgLyogQ29udGVudCBmb3IgI3tkaXNwbGF5LWJyb3dzZXItcmFuZ2UoJGJyb3dzZXIsICRtaW4tdmVyc2lvbiwgJG1heC12ZXJzaW9uKX0uXG4gICAgICBNaW4gdmVyc2lvbjogI3ttYXAtZ2V0KCRicm93c2VyLW1pbmltdW0tdmVyc2lvbnMsICRicm93c2VyKSBvciB1bnNwZWNpZmllZH0uXG4gICAgICBVc2VyIHRocmVzaG9sZCB0byBrZWVwOiAjeyR0aHJlc2hvbGR9JS4gSWYgI3tkaXNwbGF5LWJyb3dzZXItcmFuZ2UoJGJyb3dzZXIsICRtaW4tdmVyc2lvbiwgJG1heC12ZXJzaW9uKX0gYXJlIG9taXR0ZWQ6ICN7b21pdHRlZC11c2FnZSgkYnJvd3NlciwgJG1pbi12ZXJzaW9uLCAkbWF4LXZlcnNpb24pfSUuICovXG4gICAgfVxuICAgIEBpbmNsdWRlIHdpdGgtYnJvd3Nlci1yYW5nZXMoaW50ZXJzZWN0LWJyb3dzZXItcmFuZ2VzKCRjdXJyZW50LWJyb3dzZXItdmVyc2lvbnMsICRyYW5nZXMpKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJGRlYnVnLWJyb3dzZXItc3VwcG9ydCBhbmQgYnJvd3Nlci1vdXQtb2Ytc2NvcGUoJGJyb3dzZXIsICRtYXgtdmVyc2lvbikge1xuICAgIC8qIENvbnRlbnQgZm9yICN7ZGlzcGxheS1icm93c2VyLXJhbmdlKCRicm93c2VyLCAkbWluLXZlcnNpb24sICRtYXgtdmVyc2lvbil9IG9taXR0ZWQuXG4gICAgICAgTm90IGFsbG93ZWQgaW4gdGhlIGN1cnJlbnQgc2NvcGU6ICN7YnJvd3Nlci1vdXQtb2Ytc2NvcGUoJGJyb3dzZXIsICRtYXgtdmVyc2lvbil9ICovXG4gIH0gQGVsc2UgaWYgJGRlYnVnLWJyb3dzZXItc3VwcG9ydCBhbmQgbm90XG4gICAgICAgICAgICAgc3VwcG9ydC1sZWdhY3ktYnJvd3NlcigkYnJvd3NlciwgJG1pbi12ZXJzaW9uLCAkbWF4LXZlcnNpb24sICR0aHJlc2hvbGQpIHtcbiAgICBAaWYgb21pdHRlZC11c2FnZSgkYnJvd3NlciwgJG1pbi12ZXJzaW9uLCAkbWF4LXZlcnNpb24pID4gJHRocmVzaG9sZCB7XG4gICAgICAvKiBDb250ZW50IGZvciAje2Rpc3BsYXktYnJvd3Nlci1yYW5nZSgkYnJvd3NlciwgJG1pbi12ZXJzaW9uLCAkbWF4LXZlcnNpb24pfSBvbWl0dGVkLlxuICAgICAgICAgVXNlciB0aHJlc2hvbGQgdG8ga2VlcDogI3skdGhyZXNob2xkfSUuIElmICN7ZGlzcGxheS1icm93c2VyLXJhbmdlKCRicm93c2VyLCAkbWluLXZlcnNpb24sICRtYXgtdmVyc2lvbil9IGFuZCBiZWxvdyBhcmUgb21pdHRlZDogI3tvbWl0dGVkLXVzYWdlKCRicm93c2VyLCAkbWluLXZlcnNpb24sICRtYXgtdmVyc2lvbil9JS4gKi9cbiAgICB9IEBlbHNlIHtcbiAgICAgIC8qIENvbnRlbnQgZm9yICN7ZGlzcGxheS1icm93c2VyLXJhbmdlKCRicm93c2VyLCAkbWluLXZlcnNpb24sICRtYXgtdmVyc2lvbil9IG9taXR0ZWQuXG4gICAgICAgICBNaW5pbXVtIHN1cHBvcnQgaXMgI3ttYXAtZ2V0KCRicm93c2VyLW1pbmltdW0tdmVyc2lvbnMsICRicm93c2VyKX0uICovXG4gICAgfVxuICB9XG59XG5cbkBmdW5jdGlvbiBkaXNwbGF5LWJyb3dzZXItcmFuZ2UoJGJyb3dzZXIsICRtaW4tdmVyc2lvbiwgJG1heC12ZXJzaW9uOiAkbWluLXZlcnNpb24pIHtcbiAgQHJldHVybiBcIiN7dW5xdW90ZSgkYnJvd3Nlcil9ICN7dW5xdW90ZSgkbWluLXZlcnNpb24pfSN7aWYoJG1heC12ZXJzaW9uICE9ICRtaW4tdmVyc2lvbiwgdW5xdW90ZSgnIC0nKSB1bnF1b3RlKCRtYXgtdmVyc2lvbiksIG51bGwpfVwiO1xufVxuXG5cbi8vIFJlbmRlcnMgdGhlIGNvbnRlbnQgb25jZSBpZiBhbnkgb2YgdGhlIGxlZ2FjeSBicm93c2VycyBhcmUgc3VwcG9ydGVkLlxuLy8gJGJyb3dzZXJzIGlzIGEgbWFwIG9mIGJyb3dzZXIgbmFtZSB0byB2ZXJzaW9uIHJhbmdlc1xuQG1peGluIGZvci1sZWdhY3ktYnJvd3NlcnMoJGJyb3dzZXJzLCAkdGhyZXNob2xkOiAkY3JpdGljYWwtdXNhZ2UtdGhyZXNob2xkKSB7XG4gICRyZW5kZXJlZDogZmFsc2U7XG4gIEBlYWNoICRicm93c2VyLCAkcmFuZ2UgaW4gJGJyb3dzZXJzIHtcbiAgICBAaWYgbm90ICRyZW5kZXJlZCB7XG4gICAgICBAaW5jbHVkZSBmb3ItbGVnYWN5LWJyb3dzZXIoJGJyb3dzZXIsICRyYW5nZS4uLiwgJHRocmVzaG9sZDogJHRocmVzaG9sZCwgJHJhbmdlczogJGJyb3dzZXJzKSB7XG4gICAgICAgICRyZW5kZXJlZDogdHJ1ZTtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIElmIHRoZXJlJ3MgYSBwcmVmaXggY29udGV4dCBpbiBzY29wZSwgdGhpcyB3aWxsIG9ubHkgb3V0cHV0IHRoZSBjb250ZW50IGlmIHRoZSBwcmVmaXggbWF0Y2hlcy5cbi8vIE90aGVyd2lzZSwgc2V0cyB0aGUgY3VycmVudCBwcmVmaXggc2NvcGUgYW5kIG91dHB1dHMgdGhlIGNvbnRlbnQuXG5AbWl4aW4gd2l0aC1wcmVmaXgoJHByZWZpeCkge1xuICBAaWYgJGN1cnJlbnQtcHJlZml4IG9yICRwcmVmaXgtY29udGV4dCB7XG4gICAgQGlmICRjdXJyZW50LXByZWZpeCA9PSAkcHJlZml4IG9yICRwcmVmaXgtY29udGV4dCA9PSAkcHJlZml4IHtcbiAgICAgIEBpZiAkZGVidWctYnJvd3Nlci1zdXBwb3J0IHtcbiAgICAgICAgQGlmICRwcmVmaXgge1xuICAgICAgICAgIC8qIGNvbnRlbnQgZm9yICN7JHByZWZpeH0gYmVjYXVzZSAjeyRjdXJyZW50LXByZWZpeCBvciAkcHJlZml4LWNvbnRleHR9IGlzIGFscmVhZHkgaW4gc2NvcGUuICovXG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgIC8qIHVucHJlZml4ZWQgY29udGVudC4gI3skY3VycmVudC1wcmVmaXggb3IgJHByZWZpeC1jb250ZXh0fSBpcyBhbHJlYWR5IGluIHNjb3BlLiAqL1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkb2xkLXByZWZpeC1jb250ZXh0OiAkcHJlZml4LWNvbnRleHQ7XG4gICAgICAkb2xkLXByZWZpeDogJGN1cnJlbnQtcHJlZml4O1xuICAgICAgJHByZWZpeC1jb250ZXh0OiAkcHJlZml4LWNvbnRleHQgb3IgJGN1cnJlbnQtcHJlZml4ICFnbG9iYWw7XG4gICAgICAkY3VycmVudC1wcmVmaXg6ICRwcmVmaXggIWdsb2JhbDtcbiAgICAgIEBjb250ZW50O1xuICAgICAgJHByZWZpeC1jb250ZXh0OiAkb2xkLXByZWZpeC1jb250ZXh0ICFnbG9iYWw7XG4gICAgICAkY3VycmVudC1wcmVmaXg6ICRvbGQtcHJlZml4ICFnbG9iYWw7XG4gICAgfSBAZWxzZSBpZiAkcHJlZml4ID09IG51bGwge1xuICAgICAgJG9sZC1wcmVmaXgtY29udGV4dDogJHByZWZpeC1jb250ZXh0O1xuICAgICAgJHByZWZpeC1jb250ZXh0OiAkcHJlZml4LWNvbnRleHQgb3IgJGN1cnJlbnQtcHJlZml4ICFnbG9iYWw7XG4gICAgICAkY3VycmVudC1wcmVmaXg6IG51bGwgIWdsb2JhbDtcbiAgICAgIEBpZiAkZGVidWctYnJvd3Nlci1zdXBwb3J0IHtcbiAgICAgICAgLyogQ29udGVudCBmb3Igb2ZmaWNpYWwgc3ludGF4LiBQcmVmaXggY29udGV4dCBpcyBzdGlsbCAjeyRwcmVmaXgtY29udGV4dH0uICovXG4gICAgICB9XG4gICAgICBAY29udGVudDtcbiAgICAgICRjdXJyZW50LXByZWZpeDogJHByZWZpeC1jb250ZXh0ICFnbG9iYWw7XG4gICAgICAkcHJlZml4LWNvbnRleHQ6ICRvbGQtcHJlZml4LWNvbnRleHQgIWdsb2JhbDtcbiAgICB9IEBlbHNlIGlmICRkZWJ1Zy1icm93c2VyLXN1cHBvcnQge1xuICAgICAgLyogT21pdHRpbmcgY29udGVudCBmb3IgI3skcHJlZml4fSBiZWNhdXNlICN7JGN1cnJlbnQtcHJlZml4fSBpcyBhbHJlYWR5IGluIHNjb3BlLiAqL1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGlmICRkZWJ1Zy1icm93c2VyLXN1cHBvcnQgYW5kICRwcmVmaXgge1xuICAgICAgLyogQ3JlYXRpbmcgbmV3ICN7JHByZWZpeH0gY29udGV4dC4gKi9cbiAgICB9XG4gICAgJHByZWZpeC1jb250ZXh0OiAkcHJlZml4ICFnbG9iYWw7XG4gICAgJGN1cnJlbnQtcHJlZml4OiAkcHJlZml4ICFnbG9iYWw7XG4gICAgQGNvbnRlbnQ7XG4gICAgJGN1cnJlbnQtcHJlZml4OiBudWxsICFnbG9iYWw7XG4gICAgJHByZWZpeC1jb250ZXh0OiBudWxsICFnbG9iYWw7XG4gIH1cbn1cblxuQGZ1bmN0aW9uIHByZWZpeGVzLWZvci1jYXBhYmlsaXR5KCRjYXBhYmlsaXR5LCAkdGhyZXNob2xkLCAkY2FwYWJpbGl0eS1vcHRpb25zOiAkZGVmYXVsdC1jYXBhYmlsaXR5LW9wdGlvbnMpIHtcbiAgJHJlc3VsdDogKCk7XG4gIEBlYWNoICRwcmVmaXggaW4gYnJvd3Nlci1wcmVmaXhlcygkc3VwcG9ydGVkLWJyb3dzZXJzKSB7XG4gICAgJHJlc3VsdDogbWFwLW1lcmdlKCRyZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgKCRwcmVmaXg6IHVzZS1wcmVmaXgoJHByZWZpeCwgJGNhcGFiaWxpdHksICR0aHJlc2hvbGQsICRjYXBhYmlsaXR5LW9wdGlvbnMpKSk7XG4gIH1cbiAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vLyBZaWVsZHMgdG8gdGhlIG1peGluIGNvbnRlbnQgb25jZSBmb3IgZWFjaCBwcmVmaXggcmVxdWlyZWQuXG4vLyBUaGUgY3VycmVudCBwcmVmaXggaXMgc2V0IHRvIHRoZSAkY3VycmVudC1wcmVmaXggZ2xvYmFsIGZvciB1c2UgYnkgdGhlIGluY2x1ZGVkIGNvbnRlbnQuXG4vLyBBbHNvIHlpZWxkcyB0byB0aGUgY29udGVudCBvbmNlIHdpdGggJGN1cnJlbnQtcHJlZml4IHNldCB0byBudWxsIGZvciB0aGUgb2ZmaWNpYWwgdmVyc2lvblxuLy8gYXMgbG9uZyBhcyB0aGVyZSdzIG5vdCBhbHJlYWR5IGEgcHJlZml4IGluIHNjb3BlLlxuQG1peGluIHdpdGgtZWFjaC1wcmVmaXgoJGNhcGFiaWxpdHksICR0aHJlc2hvbGQsICRjYXBhYmlsaXR5LW9wdGlvbnM6ICRkZWZhdWx0LWNhcGFiaWxpdHktb3B0aW9ucykge1xuICBAZWFjaCAkcHJlZml4LCAkc2hvdWxkLXVzZS1wcmVmaXggaW4gcHJlZml4ZXMtZm9yLWNhcGFiaWxpdHkoJGNhcGFiaWxpdHksICR0aHJlc2hvbGQsICRjYXBhYmlsaXR5LW9wdGlvbnMpIHtcbiAgICBAaWYgJHNob3VsZC11c2UtcHJlZml4IHtcbiAgICAgIEBpZiAkZGVidWctYnJvd3Nlci1zdXBwb3J0IGFuZCB0eXBlLW9mKCRzaG91bGQtdXNlLXByZWZpeCkgPT0gbGlzdCB7XG4gICAgICAgIC8qIENhcGFiaWxpdHkgI3skY2FwYWJpbGl0eX0gaXMgcHJlZml4ZWQgd2l0aCAjeyRwcmVmaXh9IGJlY2F1c2UgI3skc2hvdWxkLXVzZS1wcmVmaXh9IGlzIHJlcXVpcmVkLiAqL1xuICAgICAgfSBAZWxzZSBpZiAkZGVidWctYnJvd3Nlci1zdXBwb3J0IGFuZCB0eXBlLW9mKCRzaG91bGQtdXNlLXByZWZpeCkgPT0gbnVtYmVyIHtcbiAgICAgICAgLyogQ2FwYWJpbGl0eSAjeyRjYXBhYmlsaXR5fSBpcyBwcmVmaXhlZCB3aXRoICN7JHByZWZpeH0gYmVjYXVzZSAjeyRzaG91bGQtdXNlLXByZWZpeH0lIG9mIHVzZXJzIG5lZWQgaXQgd2hpY2ggaXMgbW9yZSB0aGFuIHRoZSB0aHJlc2hvbGQgb2YgI3skdGhyZXNob2xkfSUuICovXG4gICAgICB9XG4gICAgICBAaW5jbHVkZSB3aXRoLXByZWZpeCgkcHJlZml4KSB7XG4gICAgICAgIEBpbmNsdWRlIHdpdGgtYnJvd3Nlci1yYW5nZXMoJGNhcGFiaWxpdHkpIHtcbiAgICAgICAgICBAY29udGVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgJGRlYnVnLWJyb3dzZXItc3VwcG9ydCB7XG4gICAgICAvKiBDYXBhYmlsaXR5ICN7JGNhcGFiaWxpdHl9IGlzIG5vdCBwcmVmaXhlZCB3aXRoICN7JHByZWZpeH0gYmVjYXVzZSAje3ByZWZpeC11c2FnZSgkcHJlZml4LCAkY2FwYWJpbGl0eSwgJGNhcGFiaWxpdHktb3B0aW9ucyl9JSBvZiB1c2VycyBhcmUgYWZmZWN0ZWQgd2hpY2ggaXMgbGVzcyB0aGFuIHRoZSB0aHJlc2hvbGQgb2YgI3skdGhyZXNob2xkfS4gKi9cbiAgICB9XG4gIH1cbiAgQGluY2x1ZGUgd2l0aC1wcmVmaXgobnVsbCkge1xuICAgIEBpbmNsdWRlIHdpdGgtYnJvd3Nlci1yYW5nZXMoJGNhcGFiaWxpdHkpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG4vLyBSZXR1cm5zIHRydWUgaWYgYXQgbGVhc3Qgb25lIGJyb3dzZXItdmVyc2lvbiBwYWlyIGluICRzdWJzZXQtcmFuZ2VzXG4vLyBpcyBhIGhpZ2hlciAob3Igc2FtZSkgdmVyc2lvbiB0aGFuIHRoZSBicm93c2VyLXZlcnNpb24gcGFpcnMgaW5cbi8vICRyYW5nZXMuXG5AZnVuY3Rpb24gaGFzLWJyb3dzZXItc3Vic2V0KCRyYW5nZXMsICRzdWJzZXQtcmFuZ2VzKSB7XG4gICRmb3VuZC1taXNtYXRjaDogZmFsc2U7XG4gIEBlYWNoICRicm93c2VyLCAkc3Vic2V0LXJhbmdlIGluICRzdWJzZXQtcmFuZ2VzIHtcbiAgICAkcmFuZ2U6IG1hcC1nZXQoJHJhbmdlcywgJGJyb3dzZXIpO1xuICAgIEBpZiAkcmFuZ2Uge1xuICAgICAgJG1pbi0xOiBudGgoJHN1YnNldC1yYW5nZSwgMSk7XG4gICAgICAkbWF4LTE6IG50aCgkc3Vic2V0LXJhbmdlLCAyKTtcbiAgICAgICRtaW4tMjogbnRoKCRyYW5nZSwgMSk7XG4gICAgICAkbWF4LTI6IG50aCgkcmFuZ2UsIDIpO1xuICAgICAgQGlmIChjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICRtaW4tMiwgJG1pbi0xKSA8PSAwIGFuZFxuICAgICAgICAgICBjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICRtaW4tMSwgJG1heC0yKSA8PSAwKSBvclxuICAgICAgICAgIChjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICRtaW4tMiwgJG1heC0xKSA8PSAwIGFuZFxuICAgICAgICAgICBjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICRtYXgtMSwgJG1heC0yKSA8PSAwKSBvclxuICAgICAgICAgIChjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICRtaW4tMSwgJG1pbi0yKSA8PSAwIGFuZFxuICAgICAgICAgICBjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICRtYXgtMSwgJG1heC0yKSA+PSAwKSBvclxuICAgICAgICAgIChjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICRtaW4tMSwgJG1pbi0yKSA+PSAwIGFuZFxuICAgICAgICAgICBjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICRtYXgtMSwgJG1heC0yKSA8PSAwKSB7XG4gICAgICAgIEByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICAkZm91bmQtbWlzbWF0Y2g6IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgQHJldHVybiBub3QgJGZvdW5kLW1pc21hdGNoO1xufVxuXG4vLyBXaGVuIHRoZSBzYW1lIGJyb3dzZXIgaXMgaW4gYm90aCBtYXBzLCB0aGVuIHRoZSBtaW5pbXVtIHdpbGwgYmUgc2V0XG4vLyB0byB0aGUgbWF4aW11bSBvZiB0aGUgdHdvIG1pbmltdW0gdmVyc2lvbnMsIGFuZCB0aGUgbWF4aW11bSB3aWxsIGJlXG4vLyBzZXQgdG8gdGhlIG1pbm11bSBvZiB0aGUgdHdvIG1heGltdW0gdmVyc2lvbnMuXG5AZnVuY3Rpb24gaW50ZXJzZWN0LWJyb3dzZXItcmFuZ2VzKCRyYW5nZXMsICRuZXctcmFuZ2VzKSB7XG4gIEBlYWNoICRicm93c2VyLCAkbmV3LXJhbmdlIGluICRuZXctcmFuZ2VzIHtcbiAgICAkb2xkLXJhbmdlOiBtYXAtZ2V0KCRyYW5nZXMsICRicm93c2VyKTtcbiAgICBAaWYgJG9sZC1yYW5nZSB7XG4gICAgICAkb2xkLW1pbjogbnRoKCRvbGQtcmFuZ2UsIDEpO1xuICAgICAgJG9sZC1tYXg6IGlmKGxlbmd0aCgkb2xkLXJhbmdlKSA9PSAxLCAkb2xkLW1pbiwgbnRoKCRvbGQtcmFuZ2UsIDIpKTtcbiAgICAgICRuZXctbWluOiBudGgoJG5ldy1yYW5nZSwgMSk7XG4gICAgICAkbmV3LW1heDogaWYobGVuZ3RoKCRuZXctcmFuZ2UpID09IDEsICRuZXctbWluLCBudGgoJG5ldy1yYW5nZSwgMikpO1xuICAgICAgJG1heGltaW46IGlmKGNvbXBhcmUtYnJvd3Nlci12ZXJzaW9ucygkYnJvd3NlciwgJG9sZC1taW4sICRuZXctbWluKSA+IDAsXG4gICAgICAgICAgICAgICAgICAgJG9sZC1taW4sICRuZXctbWluKTtcbiAgICAgICRtaW5pbWF4OiBpZihjb21wYXJlLWJyb3dzZXItdmVyc2lvbnMoJGJyb3dzZXIsICRvbGQtbWF4LCAkbmV3LW1heCkgPCAwLFxuICAgICAgICAgICAgICAgICAgICRvbGQtbWF4LCAkbmV3LW1heCk7XG4gICAgICAkcmFuZ2VzOiBtYXAtbWVyZ2UoJHJhbmdlcywgKCRicm93c2VyOiAkbWF4aW1pbiAkbWluaW1heCkpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJHJhbmdlczogbWFwLW1lcmdlKCRyYW5nZXMsICgkYnJvd3NlcjogJG5ldy1yYW5nZSkpO1xuICAgIH1cbiAgfVxuICBAcmV0dXJuICRyYW5nZXM7XG59XG5cbi8vIElmIHBhc3NlZCBhIG1hcCwgdGhhdCB3aWxsIGJlIHRoZSBuZXcgYnJvd3NlciByYW5nZXMuXG4vLyBPdGhlcndpc2UgYSByYW5nZSBtYXAgd2lsbCBiZSBjcmVhdGVkIGJhc2VkIG9uIHRoZSBnaXZlbiBjYXBhYmlsaXR5IGFuZCBwcmVmaXhcbi8vIHVzaW5nIHRoZSBgYnJvd3Nlci1yYW5nZXMoJGNhcGFiaWxpdHksICRwcmVmaXgpYCBmdW5jdGlvbi5cbi8vXG4vLyBJZiB0aGVyZSBhcmUgY3VycmVudCByYW5nZXMgaW4gc2NvcGUgYW5kIHRoZSBuZXcgcmFuZ2VzIGhhdmUgc29tZSBvdmVybGFwXG4vLyB3aXRoIHRoZSBjdXJyZW50LCBcbi8vXG4vLyBJZiB0aGVyZSBpcyBubyBvdmVybGFwLCB0aGVuIHRoZSBjb250ZW50IHdpbGwgbm90IGJlIHJlbmRlcmVkLlxuQG1peGluIHdpdGgtYnJvd3Nlci1yYW5nZXMoJGNhcGFiaWxpdHksICRwcmVmaXg6ICRjdXJyZW50LXByZWZpeCkge1xuICAkbmV3LXJhbmdlczogbnVsbDtcbiAgQGlmIHR5cGUtb2YoJGNhcGFiaWxpdHkpID09IG1hcCB7XG4gICAgJG5ldy1yYW5nZXM6ICRjYXBhYmlsaXR5O1xuICB9IEBlbHNlIHtcbiAgICAkbmV3LXJhbmdlczogYnJvd3Nlci1yYW5nZXMoJGNhcGFiaWxpdHksICRwcmVmaXgpO1xuICB9XG5cbiAgQGlmIGhhcy1icm93c2VyLXN1YnNldCgkY3VycmVudC1icm93c2VyLXZlcnNpb25zLCAkbmV3LXJhbmdlcykge1xuICAgICRvbGQtcmFuZ2VzOiAkY3VycmVudC1icm93c2VyLXZlcnNpb25zO1xuICAgICRjdXJyZW50LWJyb3dzZXItdmVyc2lvbnM6IGludGVyc2VjdC1icm93c2VyLXJhbmdlcygkb2xkLXJhbmdlcywgJG5ldy1yYW5nZXMpICFnbG9iYWw7XG4gICAgQGNvbnRlbnQ7XG4gICAgJGN1cnJlbnQtYnJvd3Nlci12ZXJzaW9uczogJG9sZC1yYW5nZXMgIWdsb2JhbDtcbiAgfSBAZWxzZSBpZiAkZGVidWctYnJvd3Nlci1zdXBwb3J0IHtcbiAgICAvKiBFeGNsdWRpbmcgY29udGVudCBiZWNhdXNlICN7aW5zcGVjdCgkbmV3LXJhbmdlcyl9IGlzIG5vdCBpbmNsdWRlZCB3aXRoaW5cbiAgICAgICAje2luc3BlY3QoJGN1cnJlbnQtYnJvd3Nlci12ZXJzaW9ucyl9ICovXG4gIH1cbn1cblxuLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBwcmVmaXhlZCB1c2FnZSBzdGF0cyBmb3IgdGhlIGNhcGFiaWxpdHkgZXhjZWVkIHRoZSB0aHJlc2hvbGRcbi8vIG9yIGlmIHRoZSBtaW5pbXVtIHZlcnNpb24gZm9yIGEgc3VwcG9ydGVkIGJyb3dzZXIgd291bGQgcmVxdWlyZSBhIHByZWZpeCBmb3IgdGhlIGNhcGFiaWxpdHkuXG5AZnVuY3Rpb24gdXNlLXByZWZpeCgkcHJlZml4LCAkY2FwYWJpbGl0eSwgJHRocmVzaG9sZCwgJGNhcGFiaWxpdHktb3B0aW9uczogJGRlZmF1bHQtY2FwYWJpbGl0eS1vcHRpb25zKSB7XG4gICR1c2FnZTogcHJlZml4LXVzYWdlKCRwcmVmaXgsICRjYXBhYmlsaXR5LCAkY2FwYWJpbGl0eS1vcHRpb25zKTtcbiAgQGlmICR1c2FnZSA+ICR0aHJlc2hvbGQge1xuICAgIEByZXR1cm4gJHVzYWdlO1xuICB9IEBlbHNlIHtcbiAgICBAZWFjaCAkYnJvd3NlciBpbiBicm93c2VycygkcHJlZml4KSB7XG4gICAgICBAaWYgaW5kZXgoJHN1cHBvcnRlZC1icm93c2VycywgJGJyb3dzZXIpIHtcbiAgICAgICAgJG1pbi12ZXJzaW9uOiBtYXAtZ2V0KCRicm93c2VyLW1pbmltdW0tdmVyc2lvbnMsICRicm93c2VyKTtcbiAgICAgICAgQGlmICRtaW4tdmVyc2lvbiB7XG4gICAgICAgICAgJGFjdHVhbC1wcmVmaXg6IGJyb3dzZXItcmVxdWlyZXMtcHJlZml4KCRicm93c2VyLCAkbWluLXZlcnNpb24sICRjYXBhYmlsaXR5LCAkY2FwYWJpbGl0eS1vcHRpb25zKTtcbiAgICAgICAgICBAaWYgJGFjdHVhbC1wcmVmaXggYW5kICRwcmVmaXggPT0gJGFjdHVhbC1wcmVmaXgge1xuICAgICAgICAgICAgQHJldHVybiAkYnJvd3NlciAkbWluLXZlcnNpb247XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIEByZXR1cm4gZmFsc2U7XG59XG5cbkBmdW5jdGlvbiBwcmVmaXgtaWRlbnRpZmllcigkaWRlbnQsICRwcmVmaXg6ICRjdXJyZW50LXByZWZpeCkge1xuICBAcmV0dXJuIHVucXVvdGUoXCIjeyRwcmVmaXh9I3tpZigkcHJlZml4LCAnLScsIG51bGwpfSN7JGlkZW50fVwiKTtcbn1cblxuLy8gT3V0cHV0IGEgcHJvcGVydHkgYW5kIHZhbHVlIHVzaW5nIHRoZSBjdXJyZW50IHByZWZpeC5cbi8vIEl0IHdpbGwgYmUgdW5wcmVmaXhlZCBpZiAkY3VycmVudC1wcmVmaXggaXMgbnVsbC5cbkBtaXhpbiBwcmVmaXgtcHJvcCgkcHJvcGVydHksICR2YWx1ZSwgJHByZWZpeDogJGN1cnJlbnQtcHJlZml4KSB7XG4gICN7cHJlZml4LWlkZW50aWZpZXIoJHByb3BlcnR5LCAkcHJlZml4KX06ICR2YWx1ZTtcbn1cblxuLy8gRW1pdCBhIHNldCBvZiBwcm9wZXJ0aWVzIHdpdGggdGhlIHByZWZpeCBnb3Zlcm5lZCBieSB0aGUgY2FwYWJpbGl0eSBhbmQgdXNhZ2UgdGhyZXNob2xkIGdpdmVuLlxuLy9cbi8vIEV4YW1wbGU6XG4vL1xuLy8gICAgIEBpbmNsdWRlIHByZWZpeGVkLXByb3BlcnRpZXMoY3NzLWFuaW1hdGlvbiwgJGFuaW1hdGlvbi1zdXBwb3J0LXRocmVzaG9sZCxcbi8vICAgICAgIChhbmltYXRpb24tbmFtZTogZm9vLCBhbmltYXRpb24tZHVyYXRpb246IDJzKVxuLy8gICAgICk7XG5AbWl4aW4gcHJlZml4ZWQtcHJvcGVydGllcygkY2FwYWJpbGl0eSwgJHRocmVzaG9sZCwgJHByb3BlcnRpZXMsICRjYXBhYmlsaXR5LW9wdGlvbnM6ICRkZWZhdWx0LWNhcGFiaWxpdHktb3B0aW9ucykge1xuICBAaW5jbHVkZSB3aXRoLWVhY2gtcHJlZml4KCRjYXBhYmlsaXR5LCAkdGhyZXNob2xkLCAkY2FwYWJpbGl0eS1vcHRpb25zKSB7XG4gICAgQGVhY2ggJHByb3AsICR2YWx1ZSBpbiAkcHJvcGVydGllcyB7XG4gICAgICBAaW5jbHVkZSBwcmVmaXgtcHJvcCgkcHJvcCwgJHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuXG4vLyBAcHJpdmF0ZVxuQGZ1bmN0aW9uIHdhcm4tYWJvdXQtb2xkLXZhcmlhYmxlcygpIHtcbiAgJG9sZC12YXJpYWJsZXMtaW4tdXNlOiAoKTtcbiAgQGVhY2ggJG9sZC12YXJpYWJsZS1uYW1lIGluXG4gICAgICAgIChsZWdhY3ktc3VwcG9ydC1mb3ItaWUsIGxlZ2FjeS1zdXBwb3J0LWZvci1pZTYsIGxlZ2FjeS1zdXBwb3J0LWZvci1pZTcsXG4gICAgICAgICBsZWdhY3ktc3VwcG9ydC1mb3ItaWU4LCBsZWdhY3ktc3VwcG9ydC1mb3ItbW96aWxsYSwgbGVnYWN5LXN1cHBvcnQtZm9yLXdlYmtpdCxcbiAgICAgICAgIGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1tb3ppbGxhLCBleHBlcmltZW50YWwtc3VwcG9ydC1mb3Itd2Via2l0LFxuICAgICAgICAgZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLW9wZXJhLCBleHBlcmltZW50YWwtc3VwcG9ydC1mb3ItbWljcm9zb2Z0LFxuICAgICAgICAgZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLWtodG1sLCBleHBlcmltZW50YWwtc3VwcG9ydC1mb3Itc3ZnKVxuICB7XG4gICAgQGlmIGdsb2JhbC12YXJpYWJsZS1leGlzdHMoJG9sZC12YXJpYWJsZS1uYW1lKSB7XG4gICAgICAkb2xkLXZhcmlhYmxlcy1pbi11c2U6IGFwcGVuZCgkb2xkLXZhcmlhYmxlcy1pbi11c2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnF1b3RlKFwiJCN7JG9sZC12YXJpYWJsZS1uYW1lfVwiKSwgY29tbWEpO1xuICAgIH1cbiAgfVxuICBAaWYgbGVuZ3RoKCRvbGQtdmFyaWFibGVzLWluLXVzZSkgPiAwIHtcbiAgICBAd2FybiBcIkNvbXBhc3MgaGFzIGNoYW5nZWQgaG93IGJyb3dzZXIgc3VwcG9ydCBpcyBjb25maWd1cmVkLiBcIiArXG4gICAgICAgICAgXCJUaGUgZm9sbG93aW5nIGNvbmZpZ3VyYXRpb24gdmFyaWFibGVzIFwiICtcbiAgICAgICAgICBcImFyZSBubyBsb25nZXIgc3VwcG9ydGVkOiAjeyRvbGQtdmFyaWFibGVzLWluLXVzZX0uXCIgK1xuICAgICAgICAgIFwiRGV0YWlsczogaHR0cDovL2NvbXBhc3Mtc3R5bGUub3JnL2hlbHAvZG9jdW1lbnRhdGlvbi90dW5pbmctdmVuZG9yLXByZWZpeGVzL1wiXG4gIH1cbiAgQHJldHVybiAkb2xkLXZhcmlhYmxlcy1pbi11c2U7XG59XG5cbi8vIEBwcml2YXRlXG5AZnVuY3Rpb24gd2Fybi1hYm91dC1waWUtcmVtb3ZhbCgpIHtcbiAgQGlmIGdsb2JhbC12YXJpYWJsZS1leGlzdHMoZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLXBpZSkge1xuICAgIEB3YXJuIFwiQ29tcGFzcyBubyBsb25nZXIgc3VwcG9ydHMgY3NzM3BpZS5cIjtcbiAgfVxuICBAcmV0dXJuIHRydWU7XG59XG5cbi8vIEVuYWJsZSBicm93c2VyIHN1cHBvcnQgZGVidWdnaW5nIHdpdGhpbiB0aGUgY29udGVudCBibG9jay5cbi8vIE9yIHlvdSBjYW4gZW5hYmxlIGl0IGZvciB0aGUgd2hvbGUgc3R5bGVzaGVldCBieSBzZXR0aW5nIGAkZGVidWctYnJvd3Nlci1zdXBwb3J0YCB0byB0cnVlLlxuQG1peGluIHdpdGgtYnJvd3Nlci1zdXBwb3J0LWRlYnVnZ2luZyB7XG4gICRjdXJyZW50LXN0YXR1czogJGRlYnVnLWJyb3dzZXItc3VwcG9ydDtcbiAgJGRlYnVnLWJyb3dzZXItc3VwcG9ydDogdHJ1ZSAhZ2xvYmFsO1xuICBAY29udGVudDtcbiAgJGRlYnVnLWJyb3dzZXItc3VwcG9ydDogJGN1cnJlbnQtc3RhdHVzICFnbG9iYWw7XG59XG5cbi8vIFNldCBhIGRlZmF1bHQgdmFsdWUgaWYgdGhlIGdpdmVuIGFyZ2xpc3QgaXMgZW1wdHlcbkBmdW5jdGlvbiBzZXQtYXJnbGlzdC1kZWZhdWx0KCRhcmdsaXN0LCAkZGVmYXVsdCkge1xuICAkZGVmYXVsdC1pbmRleDogaW5kZXgoJGFyZ2xpc3QsIGRlZmF1bHQpO1xuICBAaWYgJGRlZmF1bHQtaW5kZXgge1xuICAgICRhcmdsaXN0OiBzZXQtbnRoKCRhcmdsaXN0LCAkZGVmYXVsdC1pbmRleCwgJGRlZmF1bHQpXG4gIH1cbiAgQHJldHVybiBpZihsZW5ndGgoJGFyZ2xpc3QpID4gMCwgJGFyZ2xpc3QsICRkZWZhdWx0KTtcbn1cblxuXG4vLyBAcHJpdmF0ZVxuJG9sZC12YXJpYWJsZS13YXJuaW5ncy1pc3N1ZWQ6IHdhcm4tYWJvdXQtb2xkLXZhcmlhYmxlcygpICFkZWZhdWx0O1xuXG4vLyBAcHJpdmF0ZVxuJHBpZS1yZW1vdmFsLXdhcm5pbmctaXNzdWVkOiB3YXJuLWFib3V0LXBpZS1yZW1vdmFsKCkgIWRlZmF1bHQ7XG5cbi8vIEBwcml2YXRlXG5AZnVuY3Rpb24gd2Fybi1hYm91dC11c2VsZXNzLXByZWZpeC1hcmd1bWVudHMoJG1vejogbnVsbCwgJHdlYmtpdDogbnVsbCwgJG86IG51bGwsICRraHRtbDogbnVsbCwgJG9mZmljaWFsOiBudWxsKSB7XG4gIEBpZiAkbW96ICE9IG51bGwgb3IgJHdlYmtpdCAhPSBudWxsIG9yICRvICE9IG51bGwgb3IgJGtodG1sICE9IG51bGwgb3IgJG9mZmljaWFsICE9IG51bGwge1xuICAgIEB3YXJuIFwiQnJvd3NlciBwcmVmaXggYXJndW1lbnRzIHRvIHRoaXMgbWl4aW4gYXJlIG5vIGxvbmdlciB1c2VkIGFuZCBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgcmVsZWFzZS5cIjtcbiAgfVxuICBAcmV0dXJuIHRydWU7XG59XG5cbi8vIGNvZXJjZSBhIGxpc3QgdG8gYmUgY29tbWEgZGVsaW1pdGVkIG9yIG1ha2UgYSBuZXcsIGVtcHR5IGNvbW1hIGRlbGltaXRlZCBsaXN0LlxuQGZ1bmN0aW9uIGNvbW1hLWxpc3QoJGxpc3Q6ICgpKSB7XG4gIEByZXR1cm4gam9pbigoKSwgJGxpc3QsIGNvbW1hKTtcbn1cblxuLy8gQHByaXZhdGUgUmV0dXJucyB0aGUgbGVnYWN5IHZhbHVlIGZvciBhIGdpdmVuIGJveC1tb2RlbFxuLy8gLSBVc2VkIGJ5IGJhY2tncm91bmQtY2xpcCBhbmQgLW9yaWdpbi5cbkBmdW5jdGlvbiBsZWdhY3ktYm94KCRib3gpIHtcbiAgJGJveDogdW5xdW90ZSgkYm94KTtcbiAgQGlmICRib3ggPT0gcGFkZGluZy1ib3ggeyAkYm94OiBwYWRkaW5nOyB9XG4gIEBpZiAkYm94ID09IGJvcmRlci1ib3ggeyAkYm94OiBib3JkZXI7IH1cbiAgQGlmICRib3ggPT0gY29udGVudC1ib3ggeyAkYm94OiBjb250ZW50OyB9XG4gIEByZXR1cm4gJGJveDtcbn1cbiIsIkBpbXBvcnQgXCJjb21wYXNzL3N1cHBvcnRcIjtcblxuLy8gVGhlIHRoZSB1c2VyIHRocmVzaG9sZCBmb3IgdHJhbnNpdGlvbiBzdXBwb3J0LiBEZWZhdWx0cyB0byBgJGdyYWNlZnVsLXVzYWdlLXRocmVzaG9sZGBcbiR0cmFuc2l0aW9uLXN1cHBvcnQtdGhyZXNob2xkOiAkZ3JhY2VmdWwtdXNhZ2UtdGhyZXNob2xkICFkZWZhdWx0O1xuXG5cbi8vIENTUyBUcmFuc2l0aW9uc1xuLy8gQ3VycmVudGx5IG9ubHkgd29ya3MgaW4gV2Via2l0LlxuLy9cbi8vICogZXhwZWN0ZWQgaW4gQ1NTMywgRmlyZUZveCAzLjYvNyBhbmQgT3BlcmEgUHJlc3RvIDIuM1xuLy8gKiBXZSdsbCBiZSBwcmVwYXJlZC5cbi8vXG4vLyBJbmNsdWRpbmcgdGhpcyBzdWJtb2R1bGUgc2V0cyBmb2xsb3dpbmcgZGVmYXVsdHMgZm9yIHRoZSBtaXhpbnM6XG4vL1xuLy8gICAgICRkZWZhdWx0LXRyYW5zaXRpb24tcHJvcGVydHkgOiBhbGxcbi8vICAgICAkZGVmYXVsdC10cmFuc2l0aW9uLWR1cmF0aW9uIDogMXNcbi8vICAgICAkZGVmYXVsdC10cmFuc2l0aW9uLWZ1bmN0aW9uIDogZmFsc2Vcbi8vICAgICAkZGVmYXVsdC10cmFuc2l0aW9uLWRlbGF5ICAgIDogZmFsc2Vcbi8vXG4vLyBPdmVycmlkZSB0aGVtIGlmIHlvdSBsaWtlLiBUaW1pbmctZnVuY3Rpb24gYW5kIGRlbGF5IGFyZSBzZXQgdG8gZmFsc2UgZm9yIGJyb3dzZXIgZGVmYXVsdHMgKGVhc2UsIDBzKS5cblxuJGRlZmF1bHQtdHJhbnNpdGlvbi1wcm9wZXJ0eTogYWxsICFkZWZhdWx0O1xuXG4kZGVmYXVsdC10cmFuc2l0aW9uLWR1cmF0aW9uOiAxcyAhZGVmYXVsdDtcblxuJGRlZmF1bHQtdHJhbnNpdGlvbi1mdW5jdGlvbjogbnVsbCAhZGVmYXVsdDtcblxuJGRlZmF1bHQtdHJhbnNpdGlvbi1kZWxheTogbnVsbCAhZGVmYXVsdDtcblxuJHRyYW5zaXRpb25hYmxlLXByZWZpeGVkLXZhbHVlczogdHJhbnNmb3JtLCB0cmFuc2Zvcm0tb3JpZ2luICFkZWZhdWx0O1xuXG5cblxuLy8gQ2hlY2tzIGlmIHRoZSB2YWx1ZSBnaXZlbiBpcyBhIHVuaXQgb2YgdGltZS5cbkBmdW5jdGlvbiBpcy10aW1lKCR2YWx1ZSkge1xuICBAcmV0dXJuIGlmKHR5cGUtb2YoJHZhbHVlKSA9PSBudW1iZXIsIG5vdCBub3QgaW5kZXgocyBtcywgdW5pdCgkdmFsdWUpKSwgZmFsc2UpO1xufVxuXG4vLyBSZXR1cm5zIGAkcHJvcGVydHlgIHdpdGggdGhlIGdpdmVuIHByZWZpeCBpZiBpdCBpcyBmb3VuZCBpbiBgJHRyYW5zaXRpb25hYmxlLXByZWZpeGVkLXZhbHVlc2AuXG5AZnVuY3Rpb24gcHJlZml4ZWQtZm9yLXRyYW5zaXRpb24oJHByZWZpeCwgJHByb3BlcnR5KSB7XG4gIEBpZiBub3QgJHByZWZpeCB7XG4gICAgQHJldHVybiAkcHJvcGVydHk7XG4gIH1cbiAgQGlmIHR5cGUtb2YoJHByb3BlcnR5KSA9PSBsaXN0IG9yIHR5cGUtb2YoJHByb3BlcnR5KSA9PSBhcmdsaXN0IHtcbiAgICAkbmV3LWxpc3Q6IGNvbW1hLWxpc3QoKTtcbiAgICBAZWFjaCAkdiBpbiAkcHJvcGVydHkge1xuICAgICAgJG5ldy1saXN0OiBhcHBlbmQoJG5ldy1saXN0LCBwcmVmaXhlZC1mb3ItdHJhbnNpdGlvbigkcHJlZml4LCAkdikpO1xuICAgIH1cbiAgICBAcmV0dXJuICRuZXctbGlzdDtcbiAgfSBAZWxzZSB7XG4gICAgQGlmIGluZGV4KCR0cmFuc2l0aW9uYWJsZS1wcmVmaXhlZC12YWx1ZXMsICRwcm9wZXJ0eSkge1xuICAgICAgQHJldHVybiAjeyRwcmVmaXh9LSN7JHByb3BlcnR5fTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIEByZXR1cm4gJHByb3BlcnR5O1xuICAgIH1cbiAgfVxufVxuXG4vLyBSZXR1cm5zICR0cmFuc2l0aW9uLW1hcCB3aGljaCBpbmNsdWRlcyBrZXkgYW5kIHZhbHVlcyB0aGF0IG1hcCB0byBhIHRyYW5zaXRpb24gZGVjbGFyYXRpb25cbkBmdW5jdGlvbiB0cmFuc2l0aW9uLW1hcCgkdHJhbnNpdGlvbikge1xuICAkdHJhbnNpdGlvbi1tYXA6ICgpO1xuXG4gIEBlYWNoICRpdGVtIGluICR0cmFuc2l0aW9uIHtcbiAgICBAaWYgaXMtdGltZSgkaXRlbSkge1xuICAgICAgQGlmIG1hcC1oYXMta2V5KCR0cmFuc2l0aW9uLW1hcCwgZHVyYXRpb24pIHtcbiAgICAgICAgJHRyYW5zaXRpb24tbWFwOiBtYXAtbWVyZ2UoJHRyYW5zaXRpb24tbWFwLCAoZGVsYXk6ICRpdGVtKSk7XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgJHRyYW5zaXRpb24tbWFwOiBtYXAtbWVyZ2UoJHRyYW5zaXRpb24tbWFwLCAoZHVyYXRpb246ICRpdGVtKSk7XG4gICAgICB9XG4gICAgfSBAZWxzZSBpZiBtYXAtaGFzLWtleSgkdHJhbnNpdGlvbi1tYXAsIHByb3BlcnR5KSB7XG4gICAgICAkdHJhbnNpdGlvbi1tYXA6IG1hcC1tZXJnZSgkdHJhbnNpdGlvbi1tYXAsICh0aW1pbmctZnVuY3Rpb246ICRpdGVtKSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkdHJhbnNpdGlvbi1tYXA6IG1hcC1tZXJnZSgkdHJhbnNpdGlvbi1tYXAsIChwcm9wZXJ0eTogJGl0ZW0pKTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICR0cmFuc2l0aW9uLW1hcDtcbn1cblxuLy8gT25lIG9yIG1vcmUgcHJvcGVydGllcyB0byB0cmFuc2l0aW9uXG4vL1xuLy8gKiBmb3IgbXVsdGlwbGUsIHVzZSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0XG4vLyAqIGFsc28gYWNjZXB0cyBcImFsbFwiIG9yIFwibm9uZVwiXG5cbkBtaXhpbiB0cmFuc2l0aW9uLXByb3BlcnR5KCRwcm9wZXJ0aWVzLi4uKSB7XG4gICRwcm9wZXJ0aWVzOiBzZXQtYXJnbGlzdC1kZWZhdWx0KCRwcm9wZXJ0aWVzLCAkZGVmYXVsdC10cmFuc2l0aW9uLXByb3BlcnR5KTtcbiAgQGluY2x1ZGUgd2l0aC1lYWNoLXByZWZpeChjc3MtdHJhbnNpdGlvbnMsICR0cmFuc2l0aW9uLXN1cHBvcnQtdGhyZXNob2xkKSB7XG4gICAgJHByb3BzOiBpZigkY3VycmVudC1wcmVmaXgsIHByZWZpeGVkLWZvci10cmFuc2l0aW9uKCRjdXJyZW50LXByZWZpeCwgJHByb3BlcnRpZXMpLCAkcHJvcGVydGllcyk7XG4gICAgQGluY2x1ZGUgcHJlZml4LXByb3AodHJhbnNpdGlvbi1wcm9wZXJ0eSwgJHByb3BzKTtcbiAgfVxufVxuXG4vLyBPbmUgb3IgbW9yZSBkdXJhdGlvbnMgaW4gc2Vjb25kc1xuLy9cbi8vICogZm9yIG11bHRpcGxlLCB1c2UgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdFxuLy8gKiB0aGVzZSBkdXJhdGlvbnMgd2lsbCBhZmZlY3QgdGhlIHByb3BlcnRpZXMgaW4gdGhlIHNhbWUgbGlzdCBwb3NpdGlvblxuXG5AbWl4aW4gdHJhbnNpdGlvbi1kdXJhdGlvbigkZHVyYXRpb25zLi4uKSB7XG4gICRkdXJhdGlvbnM6IHNldC1hcmdsaXN0LWRlZmF1bHQoJGR1cmF0aW9ucywgJGRlZmF1bHQtdHJhbnNpdGlvbi1kdXJhdGlvbik7XG4gIEBpbmNsdWRlIHByZWZpeGVkLXByb3BlcnRpZXMoY3NzLXRyYW5zaXRpb25zLCAkdHJhbnNpdGlvbi1zdXBwb3J0LXRocmVzaG9sZCwgKFxuICAgIHRyYW5zaXRpb24tZHVyYXRpb246ICRkdXJhdGlvbnNcbiAgKSk7XG59XG5cbi8vIE9uZSBvciBtb3JlIHRpbWluZyBmdW5jdGlvbnNcbi8vXG4vLyAqIFsgZWFzZSB8IGxpbmVhciB8IGVhc2UtaW4gfCBlYXNlLW91dCB8IGVhc2UtaW4tb3V0IHwgY3ViaWMtYmV6aWVyKHgxLCB5MSwgeDIsIHkyKV1cbi8vICogRm9yIG11bHRpcGxlLCB1c2UgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdFxuLy8gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBlZmZlY3QgdGhlIHByb3BlcnRpZXMgaW4gdGhlIHNhbWUgbGlzdCBwb3NpdGlvblxuXG5AbWl4aW4gdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24oJGZ1bmN0aW9ucy4uLikge1xuICAkZnVuY3Rpb25zOiBzZXQtYXJnbGlzdC1kZWZhdWx0KCRmdW5jdGlvbnMsICRkZWZhdWx0LXRyYW5zaXRpb24tZnVuY3Rpb24pO1xuICBAaW5jbHVkZSBwcmVmaXhlZC1wcm9wZXJ0aWVzKGNzcy10cmFuc2l0aW9ucywgJHRyYW5zaXRpb24tc3VwcG9ydC10aHJlc2hvbGQsIChcbiAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogJGZ1bmN0aW9uc1xuICApKTtcbn1cblxuLy8gT25lIG9yIG1vcmUgdHJhbnNpdGlvbi1kZWxheXMgaW4gc2Vjb25kc1xuLy9cbi8vICogZm9yIG11bHRpcGxlLCB1c2UgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdFxuLy8gKiB0aGVzZSBkZWxheXMgd2lsbCBlZmZlY3QgdGhlIHByb3BlcnRpZXMgaW4gdGhlIHNhbWUgbGlzdCBwb3NpdGlvblxuXG5AbWl4aW4gdHJhbnNpdGlvbi1kZWxheSgkZGVsYXlzLi4uKSB7XG4gICRkZWxheXM6IHNldC1hcmdsaXN0LWRlZmF1bHQoJGRlbGF5cywgJGRlZmF1bHQtdHJhbnNpdGlvbi1kZWxheSk7XG4gIEBpbmNsdWRlIHByZWZpeGVkLXByb3BlcnRpZXMoY3NzLXRyYW5zaXRpb25zLCAkdHJhbnNpdGlvbi1zdXBwb3J0LXRocmVzaG9sZCwgKFxuICAgIHRyYW5zaXRpb24tZGVsYXk6ICRkZWxheXNcbiAgKSk7XG59XG5cbi8vIFRyYW5zaXRpb24gYWxsLWluLW9uZSBzaG9ydGhhbmRcblxuQG1peGluIHNpbmdsZS10cmFuc2l0aW9uKFxuICAkcHJvcGVydHk6ICRkZWZhdWx0LXRyYW5zaXRpb24tcHJvcGVydHksXG4gICRkdXJhdGlvbjogJGRlZmF1bHQtdHJhbnNpdGlvbi1kdXJhdGlvbixcbiAgJGZ1bmN0aW9uOiAkZGVmYXVsdC10cmFuc2l0aW9uLWZ1bmN0aW9uLFxuICAkZGVsYXk6ICRkZWZhdWx0LXRyYW5zaXRpb24tZGVsYXlcbikge1xuICBAaW5jbHVkZSB0cmFuc2l0aW9uKGNvbXBhY3QoJHByb3BlcnR5ICRkdXJhdGlvbiAkZnVuY3Rpb24gJGRlbGF5KSk7XG59XG5cbkBtaXhpbiB0cmFuc2l0aW9uKCR0cmFuc2l0aW9ucy4uLikge1xuICAkZGVmYXVsdDogKGNvbXBhY3QoJGRlZmF1bHQtdHJhbnNpdGlvbi1wcm9wZXJ0eSAkZGVmYXVsdC10cmFuc2l0aW9uLWR1cmF0aW9uICRkZWZhdWx0LXRyYW5zaXRpb24tZnVuY3Rpb24gJGRlZmF1bHQtdHJhbnNpdGlvbi1kZWxheSksKTtcbiAgJHRyYW5zaXRpb25zOiBpZihsZW5ndGgoJHRyYW5zaXRpb25zKSA9PSAxIGFuZCB0eXBlLW9mKG50aCgkdHJhbnNpdGlvbnMsIDEpKSA9PSBsaXN0IGFuZCBsaXN0LXNlcGFyYXRvcihudGgoJHRyYW5zaXRpb25zLCAxKSkgPT0gY29tbWEsIG50aCgkdHJhbnNpdGlvbnMsIDEpLCAkdHJhbnNpdGlvbnMpO1xuICAkdHJhbnNpdGlvbnM6IHNldC1hcmdsaXN0LWRlZmF1bHQoJHRyYW5zaXRpb25zLCAkZGVmYXVsdCk7XG5cblxuICBAaW5jbHVkZSB3aXRoLWVhY2gtcHJlZml4KGNzcy10cmFuc2l0aW9ucywgJHRyYW5zaXRpb24tc3VwcG9ydC10aHJlc2hvbGQpIHtcbiAgICAkZGVsYXlzOiBjb21tYS1saXN0KCk7XG4gICAgJHRyYW5zaXRpb25zLXdpdGhvdXQtZGVsYXlzOiBjb21tYS1saXN0KCk7XG4gICAgJHRyYW5zaXRpb25zLXdpdGgtZGVsYXlzOiBjb21tYS1saXN0KCk7XG4gICAgJGhhcy1kZWxheXM6IGZhbHNlO1xuXG5cbiAgICAvLyBUaGlzIGJsb2NrIGNhbiBiZSBtYWRlIGNvbnNpZGVyYWJseSBzaW1wbGVyIGF0IHRoZSBwb2ludCBpbiB0aW1lIHRoYXRcbiAgICAvLyB3ZSBubyBsb25nZXIgbmVlZCB0byBkZWFsIHdpdGggdGhlIGRpZmZlcmVuY2VzIGluIGhvdyBkZWxheXMgYXJlIHRyZWF0ZWQuXG4gICAgQGVhY2ggJHRyYW5zaXRpb24gaW4gJHRyYW5zaXRpb25zIHtcbiAgICAgIC8vIERlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgZm9yIHRyYW5zaXRpb25cbiAgICAgICR0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLW1hcCgkdHJhbnNpdGlvbik7XG5cbiAgICAgICRwcm9wZXJ0eTogbWFwLWdldCgkdHJhbnNpdGlvbiwgcHJvcGVydHkpO1xuICAgICAgJGR1cmF0aW9uOiBtYXAtZ2V0KCR0cmFuc2l0aW9uLCBkdXJhdGlvbik7XG4gICAgICAkdGltaW5nLWZ1bmN0aW9uOiBtYXAtZ2V0KCR0cmFuc2l0aW9uLCB0aW1pbmctZnVuY3Rpb24pO1xuICAgICAgJGRlbGF5OiBtYXAtZ2V0KCR0cmFuc2l0aW9uLCBkZWxheSk7XG5cbiAgICAgIC8vIFBhcnNlIHRyYW5zaXRpb24gc3RyaW5nIHRvIGFzc2lnbiB2YWx1ZXMgaW50byBjb3JyZWN0IHZhcmlhYmxlc1xuICAgICAgJGhhcy1kZWxheXM6ICRoYXMtZGVsYXlzIG9yICRkZWxheTtcblxuICAgICAgQGlmICRjdXJyZW50LXByZWZpeCA9PSAtd2Via2l0IHtcbiAgICAgICAgLy8gS2VlcCBhIGxpc3Qgb2YgZGVsYXlzIGluIGNhc2Ugb25lIGlzIHNwZWNpZmllZFxuICAgICAgICAkZGVsYXlzOiBhcHBlbmQoJGRlbGF5cywgaWYoJGRlbGF5LCAkZGVsYXksIDBzKSk7XG4gICAgICAgICR0cmFuc2l0aW9ucy13aXRob3V0LWRlbGF5czogYXBwZW5kKCR0cmFuc2l0aW9ucy13aXRob3V0LWRlbGF5cyxcbiAgICAgICAgICBwcmVmaXhlZC1mb3ItdHJhbnNpdGlvbigkY3VycmVudC1wcmVmaXgsICRwcm9wZXJ0eSkgJGR1cmF0aW9uICR0aW1pbmctZnVuY3Rpb24pO1xuICAgICAgfSBAZWxzZSB7XG4gICAgICAgICR0cmFuc2l0aW9ucy13aXRoLWRlbGF5czogYXBwZW5kKCR0cmFuc2l0aW9ucy13aXRoLWRlbGF5cyxcbiAgICAgICAgICBwcmVmaXhlZC1mb3ItdHJhbnNpdGlvbigkY3VycmVudC1wcmVmaXgsICRwcm9wZXJ0eSkgJGR1cmF0aW9uICR0aW1pbmctZnVuY3Rpb24gJGRlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaWYgJGN1cnJlbnQtcHJlZml4ID09IC13ZWJraXQge1xuICAgICAgQGluY2x1ZGUgcHJlZml4LXByb3AodHJhbnNpdGlvbiwgJHRyYW5zaXRpb25zLXdpdGhvdXQtZGVsYXlzKTtcbiAgICAgIEBpZiAkaGFzLWRlbGF5cyB7XG4gICAgICAgIEBpbmNsdWRlIHByZWZpeC1wcm9wKHRyYW5zaXRpb24tZGVsYXksICRkZWxheXMpO1xuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgJGN1cnJlbnQtcHJlZml4IHtcbiAgICAgIEBpbmNsdWRlIHByZWZpeC1wcm9wKHRyYW5zaXRpb24sICR0cmFuc2l0aW9ucy13aXRoLWRlbGF5cyk7XG4gICAgfSBAZWxzZSB7XG4gICAgICB0cmFuc2l0aW9uOiAkdHJhbnNpdGlvbnMtd2l0aC1kZWxheXM7XG4gICAgfVxuICB9XG59XG4iLCJAaW1wb3J0IFwiY29tcGFzcy9zdXBwb3J0XCI7XG5cbi8vIFRoZSB0aGUgdXNlciB0aHJlc2hvbGQgZm9yIHRyYW5zZm9ybSBzdXBwb3J0LiBEZWZhdWx0cyB0byBgJGdyYWNlZnVsLXVzYWdlLXRocmVzaG9sZGBcbiR0cmFuc2Zvcm0tc3VwcG9ydC10aHJlc2hvbGQ6ICRncmFjZWZ1bC11c2FnZS10aHJlc2hvbGQgIWRlZmF1bHQ7XG5cbi8vIEBkb2Mgb2ZmXG4vLyBOb3RlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFNhZmFyaSwgQ2hyb21lLCBhbmQgRmlyZWZveCBhbGwgc3VwcG9ydCAzRCB0cmFuc2Zvcm1zLiBIb3dldmVyLFxuLy8gb25seSBpbiB0aGUgbW9zdCByZWNlbnQgYnVpbGRzLiBZb3Ugc2hvdWxkIGFsc28gcHJvdmlkZSBmYWxsYmFjayAyZCBzdXBwb3J0IGZvclxuLy8gT3BlcmEgYW5kIElFLiBJRTEwIGlzIHNsYXRlZCB0byBoYXZlIDNkIGVuYWJsZWQsIGJ1dCBpcyBjdXJyZW50bHkgdW5yZWxlYXNlZC5cbi8vIFRvIG1ha2UgdGhhdCBlYXN5LCBhbGwgMkQgdHJhbnNmb3JtcyBpbmNsdWRlIGFuIGJyb3dzZXItdGFyZ2V0aW5nIHRvZ2dsZSAoJG9ubHkzZClcbi8vIHRvIHN3aXRjaCBiZXR3ZWVuIHRoZSB0d28gc3VwcG9ydCBsaXN0cy4gVGhlIHRvZ2dsZSBkZWZhdWx0cyB0byAnZmFsc2UnICgyRCksXG4vLyBhbmQgYWxzbyBhY2NlcHRzICd0cnVlJyAoM0QpLiBDdXJyZW50bHkgdGhlIGxpc3RzIGFyZSBhcyBmb2xsb3dzOlxuLy8gMkQ6IE1vemlsbGEsIFdlYmtpdCwgT3BlcmEsIE9mZmljaWFsXG4vLyAzRDogV2Via2l0LCBGaXJlZm94LlxuXG4vLyBBdmFpbGFibGUgVHJhbnNmb3JtcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gU2NhbGUgKDJkIGFuZCAzZClcbi8vIC0gUm90YXRlICgyZCBhbmQgM2QpXG4vLyAtIFRyYW5zbGF0ZSAoMmQgYW5kIDNkKVxuLy8gLSBTa2V3ICgyZCBvbmx5KVxuXG4vLyBUcmFuc2Zvcm0gUGFyYW1ldGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gVHJhbnNmb3JtIE9yaWdpbiAoMmQgYW5kIDNkKVxuLy8gLSBQZXJzcGVjdGl2ZSAoM2QpXG4vLyAtIFBlcnNwZWN0aXZlIE9yaWdpbiAoM2QpXG4vLyAtIFRyYW5zZm9ybSBTdHlsZSAoM2QpXG4vLyAtIEJhY2tmYWNlIFZpc2liaWxpdHkgKDNkKVxuXG4vLyBNaXhpbnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIHRyYW5zZm9ybS1vcmlnaW5cbi8vICAtIHNob3J0Y3V0czogIHRyYW5zZm9ybS1vcmlnaW4yZCwgdHJhbnNmb3JtLW9yaWdpbjNkXG4vLyAgLSBoZWxwZXJzOiAgICBhcHBseS1vcmlnaW5cbi8vIHRyYW5zZm9ybVxuLy8gIC0gc2hvcnRjdXRzOiAgdHJhbnNmb3JtMmQsIHRyYW5zZm9ybTNkXG4vLyAgLSBoZWxwZXJzOiAgICBzaW1wbGUtdHJhbnNmb3JtLCBjcmVhdGUtdHJhbnNmb3JtXG4vLyBwZXJzcGVjdGl2ZVxuLy8gIC0gaGVscGVyczogICAgcGVyc3BlY3RpdmUtb3JpZ2luXG4vLyB0cmFuc2Zvcm0tc3R5bGVcbi8vIGJhY2tmYWNlLXZpc2liaWxpdHlcbi8vIHNjYWxlXG4vLyAgLSBzaG9ydGN1dHM6ICBzY2FsZVgsIHNjYWxlWSwgc2NhbGVaLCBzY2FsZTNkXG4vLyByb3RhdGVcbi8vICAtIHNob3J0Y3V0czogIHJvdGF0ZVgsIHJvdGF0ZVksIHJvdGF0ZTNkXG4vLyB0cmFuc2xhdGVcbi8vICAtIHNob3J0Y3V0czogIHRyYW5zbGF0ZVgsIHRyYW5zbGF0ZVksIHRyYW5zbGF0ZVosIHRyYW5zbGF0ZTNkXG4vLyBza2V3XG4vLyAgLSBzaG9ydGN1dHM6ICBza2V3WCwgc2tld1lcblxuLy8gRGVmYXVsdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBAZG9jIG9uXG5cbi8vIFRoZSBkZWZhdWx0IHgtb3JpZ2luIGZvciB0cmFuc2Zvcm1zXG4kZGVmYXVsdC1vcmlnaW4teCAgICA6IDUwJSAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcbi8vIFRoZSBkZWZhdWx0IHktb3JpZ2luIGZvciB0cmFuc2Zvcm1zXG4kZGVmYXVsdC1vcmlnaW4teSAgICA6IDUwJSAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcbi8vIFRoZSBkZWZhdWx0IHotb3JpZ2luIGZvciB0cmFuc2Zvcm1zXG4kZGVmYXVsdC1vcmlnaW4teiAgICA6IDUwJSAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcblxuXG4vLyBUaGUgZGVmYXVsdCB4LW11bHRpcGxpZXIgZm9yIHNjYWxpbmdcbiRkZWZhdWx0LXNjYWxlLXggICAgIDogMS4yNSAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xuLy8gVGhlIGRlZmF1bHQgeS1tdWx0aXBsaWVyIGZvciBzY2FsaW5nXG4kZGVmYXVsdC1zY2FsZS15ICAgICA6ICRkZWZhdWx0LXNjYWxlLXggICAgICAhZGVmYXVsdDtcbi8vIFRoZSBkZWZhdWx0IHotbXVsdGlwbGllciBmb3Igc2NhbGluZ1xuJGRlZmF1bHQtc2NhbGUteiAgICAgOiAkZGVmYXVsdC1zY2FsZS14ICAgICAgIWRlZmF1bHQ7XG5cblxuLy8gVGhlIGRlZmF1bHQgYW5nbGUgZm9yIHJvdGF0aW9uc1xuJGRlZmF1bHQtcm90YXRlICAgICAgOiA0NWRlZyAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG5cblxuLy8gVGhlIGRlZmF1bHQgeC12ZWN0b3IgZm9yIHRoZSBheGlzIG9mIDNkIHJvdGF0aW9uc1xuJGRlZmF1bHQtdmVjdG9yLXggICAgOiAxICAgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4vLyBUaGUgZGVmYXVsdCB5LXZlY3RvciBmb3IgdGhlIGF4aXMgb2YgM2Qgcm90YXRpb25zXG4kZGVmYXVsdC12ZWN0b3IteSAgICA6IDEgICAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcbi8vIFRoZSBkZWZhdWx0IHotdmVjdG9yIGZvciB0aGUgYXhpcyBvZiAzZCByb3RhdGlvbnNcbiRkZWZhdWx0LXZlY3Rvci16ICAgIDogMSAgICAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xuXG5cbi8vIFRoZSBkZWZhdWx0IHgtbGVuZ3RoIGZvciB0cmFuc2xhdGlvbnNcbiRkZWZhdWx0LXRyYW5zbGF0ZS14IDogMWVtICAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xuLy8gVGhlIGRlZmF1bHQgeS1sZW5ndGggZm9yIHRyYW5zbGF0aW9uc1xuJGRlZmF1bHQtdHJhbnNsYXRlLXkgOiAkZGVmYXVsdC10cmFuc2xhdGUteCAgIWRlZmF1bHQ7XG4vLyBUaGUgZGVmYXVsdCB6LWxlbmd0aCBmb3IgdHJhbnNsYXRpb25zXG4kZGVmYXVsdC10cmFuc2xhdGUteiA6ICRkZWZhdWx0LXRyYW5zbGF0ZS14ICAhZGVmYXVsdDtcblxuXG4vLyBUaGUgZGVmYXVsdCB4LWFuZ2xlIGZvciBza2V3aW5nXG4kZGVmYXVsdC1za2V3LXggICAgICA6IDVkZWcgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcbi8vIFRoZSBkZWZhdWx0IHktYW5nbGUgZm9yIHNrZXdpbmdcbiRkZWZhdWx0LXNrZXcteSAgICAgIDogNWRlZyAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xuXG5cbi8vICoqVHJhbnNmb3JtLW9yaWdpbioqXG4vLyBUcmFuc2Zvcm0tb3JpZ2luIHNlbnQgYXMgYSBjb21wbGV0ZSBzdHJpbmdcbi8vXG4vLyAgICAgQGluY2x1ZGUgYXBwbHktb3JpZ2luKCBvcmlnaW4gWywgM0Qtb25seSBdIClcbi8vXG4vLyB3aGVyZSAnb3JpZ2luJyBpcyBhIHNwYWNlIHNlcGFyYXRlZCBsaXN0IGNvbnRhaW5pbmcgMS0zICh4L3kveikgY29vcmRpbmF0ZXNcbi8vIGluIHBlcmNlbnRhZ2VzLCBhYnNvbHV0ZSAocHgsIGNtLCBpbiwgZW0gZXRjLi4pIG9yIHJlbGF0aXZlXG4vLyAobGVmdCwgdG9wLCByaWdodCwgYm90dG9tLCBjZW50ZXIpIHVuaXRzXG4vL1xuLy8gQHBhcmFtIG9ubHkzZCBTZXQgdGhpcyB0byB0cnVlIHRvIG9ubHkgYXBwbHkgdGhpc1xuLy8gbWl4aW4gd2hlcmUgYnJvd3NlcnMgaGF2ZSAzRCBzdXBwb3J0LlxuQG1peGluIGFwcGx5LW9yaWdpbigkb3JpZ2luLCAkb25seTNkKSB7XG4gICRjYXBhYmlsaXR5OiBpZigkb25seTNkIG9yIGxlbmd0aCgkb3JpZ2luKSA+IDIsIHRyYW5zZm9ybXMzZCwgdHJhbnNmb3JtczJkKTtcbiAgQGluY2x1ZGUgcHJlZml4ZWQtcHJvcGVydGllcygkY2FwYWJpbGl0eSwgJHRyYW5zZm9ybS1zdXBwb3J0LXRocmVzaG9sZCwgKFxuICAgIHRyYW5zZm9ybS1vcmlnaW46ICRvcmlnaW5cbiAgKSk7XG59XG5cbi8vIFRyYW5zZm9ybS1vcmlnaW4gc2VudCBhcyBpbmRpdmlkdWFsIGFyZ3VtZW50czpcbi8vXG4vLyAgICAgQGluY2x1ZGUgdHJhbnNmb3JtLW9yaWdpbiggWyBvcmlnaW4teCwgb3JpZ2luLXksIG9yaWdpbi16LCAzRC1vbmx5IF0gKVxuLy9cbi8vIHdoZXJlIHRoZSAzICdvcmlnaW4tJyBhcmd1bWVudHMgcmVwcmVzZW50IHgveS96IGNvb3JkaW5hdGVzLlxuLy9cbi8vICoqTk9URToqKiBzZXR0aW5nIHogY29vcmRpbmF0ZXMgdHJpZ2dlcnMgM0Qgc3VwcG9ydCBsaXN0LCBsZWF2ZSBmYWxzZSBmb3IgMkQgc3VwcG9ydFxuQG1peGluIHRyYW5zZm9ybS1vcmlnaW4oXG4gICRvcmlnaW4teDogJGRlZmF1bHQtb3JpZ2luLXgsXG4gICRvcmlnaW4teTogJGRlZmF1bHQtb3JpZ2luLXksXG4gICRvcmlnaW4tejogZmFsc2UsXG4gICRvbmx5M2Q6ICAgaWYoJG9yaWdpbi16LCB0cnVlLCBmYWxzZSlcbikge1xuICAkb3JpZ2luOiB1bnF1b3RlKCcnKTtcbiAgQGlmICRvcmlnaW4teCBvciAkb3JpZ2luLXkgb3IgJG9yaWdpbi16IHtcbiAgICBAaWYgJG9yaWdpbi14IHsgJG9yaWdpbjogJG9yaWdpbi14OyB9IEBlbHNlIHsgJG9yaWdpbjogNTAlOyB9XG4gICAgQGlmICRvcmlnaW4teSB7ICRvcmlnaW46ICRvcmlnaW4gJG9yaWdpbi15OyB9IEBlbHNlIHsgQGlmICRvcmlnaW4teiB7ICRvcmlnaW46ICRvcmlnaW4gNTAlOyB9fVxuICAgIEBpZiAkb3JpZ2luLXogeyAkb3JpZ2luOiAkb3JpZ2luICRvcmlnaW4tejsgfVxuICAgIEBpbmNsdWRlIGFwcGx5LW9yaWdpbigkb3JpZ2luLCAkb25seTNkKTtcbiAgfVxufVxuXG5cbi8vIFRyYW5zZm9ybSBzZW50IGFzIGEgY29tcGxldGUgc3RyaW5nOlxuLy9cbi8vICAgICBAaW5jbHVkZSB0cmFuc2Zvcm0oIHRyYW5zZm9ybXMgWywgM0Qtb25seSBdIClcbi8vXG4vLyB3aGVyZSAndHJhbnNmb3JtcycgaXMgYSBzcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiBhbGwgdGhlIHRyYW5zZm9ybXMgdG8gYmUgYXBwbGllZC5cbkBtaXhpbiB0cmFuc2Zvcm0oXG4gICR0cmFuc2Zvcm0sXG4gICRvbmx5M2Q6IGZhbHNlXG4pIHtcbiAgJGNhcGFiaWxpdHk6IGlmKCRvbmx5M2QsIHRyYW5zZm9ybXMzZCwgdHJhbnNmb3JtczJkKTtcbiAgQGluY2x1ZGUgcHJlZml4ZWQtcHJvcGVydGllcygkY2FwYWJpbGl0eSwgJHRyYW5zZm9ybS1zdXBwb3J0LXRocmVzaG9sZCwgKFxuICAgIHRyYW5zZm9ybTogJHRyYW5zZm9ybVxuICApKTtcbn1cblxuLy8gU2hvcnRjdXQgdG8gdGFyZ2V0IGFsbCBicm93c2VycyB3aXRoIDJEIHRyYW5zZm9ybSBzdXBwb3J0XG5AbWl4aW4gdHJhbnNmb3JtMmQoJHRyYW5zKSB7XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsIGZhbHNlKTtcbn1cblxuLy8gU2hvcnRjdXQgdG8gdGFyZ2V0IG9ubHkgYnJvd3NlcnMgd2l0aCAzRCB0cmFuc2Zvcm0gc3VwcG9ydFxuQG1peGluIHRyYW5zZm9ybTNkKCR0cmFucykge1xuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCB0cnVlKTtcbn1cblxuLy8gQGRvYyBvZmZcbi8vIDNEIFBhcmFtZXRlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQGRvYyBvblxuXG4vLyBTZXQgdGhlIHBlcnNwZWN0aXZlIG9mIDNEIHRyYW5zZm9ybXMgb24gdGhlIGNoaWxkcmVuIG9mIGFuIGVsZW1lbnQ6XG4vL1xuLy8gICAgICBAaW5jbHVkZSBwZXJzcGVjdGl2ZSggcGVyc3BlY3RpdmUgKVxuLy9cbi8vIHdoZXJlICdwZXJzcGVjdGl2ZScgaXMgYSB1bml0bGVzcyBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBkZXB0aCBvZiB0aGVcbi8vIHotYXhpcy4gVGhlIGhpZ2hlciB0aGUgcGVyc3BlY3RpdmUsIHRoZSBtb3JlIGV4YWdnZXJhdGVkIHRoZSBmb3Jlc2hvcnRlbmluZy5cbi8vIHZhbHVlcyBmcm9tIDUwMCB0byAxMDAwIGFyZSBtb3JlLW9yLWxlc3MgXCJub3JtYWxcIiAtIGEgZ29vZCBzdGFydGluZy1wb2ludC5cbkBtaXhpbiBwZXJzcGVjdGl2ZSgkcCkge1xuICBAaW5jbHVkZSBwcmVmaXhlZC1wcm9wZXJ0aWVzKHRyYW5zZm9ybXMzZCwgJHRyYW5zZm9ybS1zdXBwb3J0LXRocmVzaG9sZCwgKFxuICAgIHBlcnNwZWN0aXZlOiAkcFxuICApKTtcbn1cblxuLy8gU2V0IHRoZSBvcmlnaW4gcG9zaXRpb24gZm9yIHRoZSBwZXJzcGVjdGl2ZVxuLy9cbi8vICAgICAgQGluY2x1ZGUgcGVyc3BlY3RpdmUtb3JpZ2luKG9yaWdpbi14IFtvcmlnaW4teV0pXG4vL1xuLy8gd2hlcmUgdGhlIHR3byBhcmd1bWVudHMgcmVwcmVzZW50IHgveSBjb29yZGluYXRlc1xuQG1peGluIHBlcnNwZWN0aXZlLW9yaWdpbigkb3JpZ2luOiA1MCUpIHtcbiAgQGluY2x1ZGUgcHJlZml4ZWQtcHJvcGVydGllcyh0cmFuc2Zvcm1zM2QsICR0cmFuc2Zvcm0tc3VwcG9ydC10aHJlc2hvbGQsIChcbiAgICBwZXJzcGVjdGl2ZS1vcmlnaW46ICRvcmlnaW5cbiAgKSk7XG59XG5cbi8vIERldGVybWluZSB3aGV0aGVyIGEgM0Qgb2JqZWN0cyBjaGlsZHJlbiBhbHNvIGxpdmUgaW4gdGhlIGdpdmVuIDNEIHNwYWNlXG4vL1xuLy8gICAgICBAaW5jbHVkZSB0cmFuc2Zvcm0tc3R5bGUoIFsgc3R5bGUgXSApXG4vL1xuLy8gd2hlcmUgYHN0eWxlYCBjYW4gYmUgZWl0aGVyIGBmbGF0YCBvciBgcHJlc2VydmUtM2RgLlxuLy8gQnJvd3NlcnMgZGVmYXVsdCB0byBgZmxhdGAsIG1peGluIGRlZmF1bHRzIHRvIGBwcmVzZXJ2ZS0zZGAuXG5AbWl4aW4gdHJhbnNmb3JtLXN0eWxlKCRzdHlsZTogcHJlc2VydmUtM2QpIHtcbiAgQGluY2x1ZGUgcHJlZml4ZWQtcHJvcGVydGllcyh0cmFuc2Zvcm1zM2QsICR0cmFuc2Zvcm0tc3VwcG9ydC10aHJlc2hvbGQsIChcbiAgICB0cmFuc2Zvcm0tc3R5bGU6ICRzdHlsZVxuICApKTtcbn1cblxuLy8gRGV0ZXJtaW5lIHRoZSB2aXNpYmlsaXR5IG9mIGFuIGVsZW1lbnQgd2hlbiBpdCdzIGJhY2sgaXMgdHVybmVkXG4vL1xuLy8gICAgIEBpbmNsdWRlIGJhY2tmYWNlLXZpc2liaWxpdHkoIFsgdmlzaWJpbGl0eSBdIClcbi8vXG4vLyB3aGVyZSBgdmlzaWJpbGl0eWAgY2FuIGJlIGVpdGhlciBgdmlzaWJsZWAgb3IgYGhpZGRlbmAuXG4vLyBCcm93c2VycyBkZWZhdWx0IHRvIHZpc2libGUsIG1peGluIGRlZmF1bHRzIHRvIGhpZGRlblxuQG1peGluIGJhY2tmYWNlLXZpc2liaWxpdHkoJHZpc2liaWxpdHk6IGhpZGRlbikge1xuICBAaW5jbHVkZSBwcmVmaXhlZC1wcm9wZXJ0aWVzKHRyYW5zZm9ybXMzZCwgJHRyYW5zZm9ybS1zdXBwb3J0LXRocmVzaG9sZCwgKFxuICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6ICR2aXNpYmlsaXR5XG4gICkpO1xufVxuXG4vLyBAZG9jIG9mZlxuLy8gVHJhbnNmb3JtIFBhcnRpYWxzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGVzZSB3b3JrIHdlbGwgb24gdGhlaXIgb3duLCBidXQgdGhleSBkb24ndCBhZGQgdG8gZWFjaCBvdGhlciwgdGhleSBvdmVycmlkZS5cbi8vIFVzZSBhbG9uZyB3aXRoIHRyYW5zZm9ybSBwYXJhbWV0ZXIgbWl4aW5zIHRvIGFkanVzdCBvcmlnaW4sIHBlcnNwZWN0aXZlIGFuZCBzdHlsZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuLy8gU2NhbGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBAZG9jIG9uXG5cbi8vIFNjYWxlIGFuIG9iamVjdCBhbG9uZyB0aGUgeCBhbmQgeSBheGlzOlxuLy9cbi8vICAgICAgQGluY2x1ZGUgc2NhbGUoIFsgc2NhbGUteCwgc2NhbGUteSwgcGVyc3BlY3RpdmUsIDNELW9ubHkgXSApXG4vL1xuLy8gd2hlcmUgdGhlICdzY2FsZS0nIGFyZ3VtZW50cyBhcmUgdW5pdGxlc3MgbXVsdGlwbGllcnMgb2YgdGhlIHggYW5kIHkgZGltZW5zaW9uc1xuLy8gYW5kIHBlcnNwZWN0aXZlLCB3aGljaCB3b3JrcyB0aGUgc2FtZSBhcyB0aGUgc3RhbmQtYWxvbmUgcGVyc3BlY3RpdmUgcHJvcGVydHkvbWl4aW5cbi8vIGJ1dCBhcHBsaWVzIHRvIHRoZSBpbmRpdmlkdWFsIGVsZW1lbnQgKG11bHRpcGxpZWQgd2l0aCBhbnkgcGFyZW50IHBlcnNwZWN0aXZlKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiBzY2FsZShcbiAgJHNjYWxlLXg6ICAgICAkZGVmYXVsdC1zY2FsZS14LFxuICAkc2NhbGUteTogICAgICRzY2FsZS14LFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlLFxuICAkb25seTNkOiAgICAgIGZhbHNlXG4pIHtcbiAgJHRyYW5zOiBzY2FsZSgkc2NhbGUteCwgJHNjYWxlLXkpO1xuICBAaWYgJHBlcnNwZWN0aXZlIHsgJHRyYW5zOiBwZXJzcGVjdGl2ZSgkcGVyc3BlY3RpdmUpICR0cmFuczsgfVxuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCAkb25seTNkKTtcbn1cblxuLy8gU2NhbGUgYW4gb2JqZWN0IGFsb25nIHRoZSB4IGF4aXNcbi8vIEBpbmNsdWRlIHNjYWxlWCggWyBzY2FsZS14LCBwZXJzcGVjdGl2ZSwgM0Qtb25seSBdIClcbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gc2NhbGVYKFxuICAkc2NhbGU6ICAgICAgICRkZWZhdWx0LXNjYWxlLXgsXG4gICRwZXJzcGVjdGl2ZTogZmFsc2UsXG4gICRvbmx5M2Q6ICAgICAgZmFsc2Vcbikge1xuICAkdHJhbnM6IHNjYWxlWCgkc2NhbGUpO1xuICBAaWYgJHBlcnNwZWN0aXZlIHsgJHRyYW5zOiBwZXJzcGVjdGl2ZSgkcGVyc3BlY3RpdmUpICR0cmFuczsgfVxuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCAkb25seTNkKTtcbn1cblxuLy8gU2NhbGUgYW4gb2JqZWN0IGFsb25nIHRoZSB5IGF4aXNcbi8vIEBpbmNsdWRlIHNjYWxlWSggWyBzY2FsZS15LCBwZXJzcGVjdGl2ZSwgM0Qtb25seSBdIClcbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gc2NhbGVZKFxuICAkc2NhbGU6ICAgICAgICRkZWZhdWx0LXNjYWxlLXksXG4gICRwZXJzcGVjdGl2ZTogZmFsc2UsXG4gICRvbmx5M2Q6ICAgICAgZmFsc2Vcbikge1xuICAkdHJhbnM6IHNjYWxlWSgkc2NhbGUpO1xuICBAaWYgJHBlcnNwZWN0aXZlIHsgJHRyYW5zOiBwZXJzcGVjdGl2ZSgkcGVyc3BlY3RpdmUpICR0cmFuczsgfVxuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCAkb25seTNkKTtcbn1cblxuLy8gU2NhbGUgYW4gb2JqZWN0IGFsb25nIHRoZSB6IGF4aXNcbi8vIEBpbmNsdWRlIHNjYWxlWiggWyBzY2FsZS16LCBwZXJzcGVjdGl2ZSBdIClcbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gc2NhbGVaKFxuICAkc2NhbGU6ICRkZWZhdWx0LXNjYWxlLXosXG4gICRwZXJzcGVjdGl2ZTogZmFsc2Vcbikge1xuICAkdHJhbnM6IHNjYWxlWigkc2NhbGUpO1xuICBAaWYgJHBlcnNwZWN0aXZlIHsgJHRyYW5zOiBwZXJzcGVjdGl2ZSgkcGVyc3BlY3RpdmUpICR0cmFuczsgfVxuICBAaW5jbHVkZSB0cmFuc2Zvcm0zZCgkdHJhbnMpO1xufVxuXG4vLyBTY2FsZSBhbmQgb2JqZWN0IGFsb25nIGFsbCB0aHJlZSBheGlzXG4vLyBAaW5jbHVkZSBzY2FsZTNkKCBbIHNjYWxlLXgsIHNjYWxlLXksIHNjYWxlLXosIHBlcnNwZWN0aXZlIF0gKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiBzY2FsZTNkKFxuICAkc2NhbGUteDogICAgICRkZWZhdWx0LXNjYWxlLXgsXG4gICRzY2FsZS15OiAgICAgJGRlZmF1bHQtc2NhbGUteSxcbiAgJHNjYWxlLXo6ICAgICAkZGVmYXVsdC1zY2FsZS16LFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlXG4pIHtcbiAgJHRyYW5zOiBzY2FsZTNkKCRzY2FsZS14LCAkc2NhbGUteSwgJHNjYWxlLXopO1xuICBAaWYgJHBlcnNwZWN0aXZlIHsgJHRyYW5zOiBwZXJzcGVjdGl2ZSgkcGVyc3BlY3RpdmUpICR0cmFuczsgfVxuICBAaW5jbHVkZSB0cmFuc2Zvcm0zZCgkdHJhbnMpO1xufVxuXG4vLyBAZG9jIG9mZlxuLy8gUm90YXRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBAZG9jIG9uXG5cbi8vIFJvdGF0ZSBhbiBvYmplY3QgYXJvdW5kIHRoZSB6IGF4aXMgICgyRClcbi8vIEBpbmNsdWRlIHJvdGF0ZSggWyByb3RhdGlvbiwgcGVyc3BlY3RpdmUsIDNELW9ubHkgXSApXG4vLyB3aGVyZSAncm90YXRpb24nIGlzIGFuIGFuZ2xlIHNldCBpbiBkZWdyZWVzIChkZWcpIG9yIHJhZGlhbiAocmFkKSB1bml0c1xuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiByb3RhdGUoXG4gICRyb3RhdGU6ICAgICAgJGRlZmF1bHQtcm90YXRlLFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlLFxuICAkb25seTNkOiAgICAgIGZhbHNlXG4pIHtcbiAgJHRyYW5zOiByb3RhdGUoJHJvdGF0ZSk7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsICRvbmx5M2QpO1xufVxuXG4vLyBBIGxvbmdjdXQgZm9yICdyb3RhdGUnIGluIGNhc2UgeW91IGZvcmdldCB0aGF0ICd6JyBpcyBpbXBsaWVkXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHJvdGF0ZVooXG4gICRyb3RhdGU6ICAgICAgJGRlZmF1bHQtcm90YXRlLFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlLFxuICAkb25seTNkOiAgICAgIGZhbHNlXG4pIHtcbiAgQGluY2x1ZGUgcm90YXRlKCRyb3RhdGUsICRwZXJzcGVjdGl2ZSwgJG9ubHkzZCk7XG59XG5cbi8vIFJvdGF0ZSBhbiBvYmplY3QgYXJvdW5kIHRoZSB4IGF4aXMgKDNEKVxuLy8gQGluY2x1ZGUgcm90YXRlWCggWyByb3RhdGlvbiwgcGVyc3BlY3RpdmUgXSApXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHJvdGF0ZVgoXG4gICRyb3RhdGU6ICRkZWZhdWx0LXJvdGF0ZSxcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZVxuKSB7XG4gICR0cmFuczogcm90YXRlWCgkcm90YXRlKTtcbiAgQGlmICRwZXJzcGVjdGl2ZSB7ICR0cmFuczogcGVyc3BlY3RpdmUoJHBlcnNwZWN0aXZlKSAkdHJhbnM7IH1cbiAgQGluY2x1ZGUgdHJhbnNmb3JtM2QoJHRyYW5zKTtcbn1cblxuLy8gUm90YXRlIGFuIG9iamVjdCBhcm91bmQgdGhlIHkgYXhpcyAoM0QpXG4vLyBAaW5jbHVkZSByb3RhdGUoIFsgcm90YXRpb24sIHBlcnNwZWN0aXZlIF0gKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiByb3RhdGVZKFxuICAkcm90YXRlOiAkZGVmYXVsdC1yb3RhdGUsXG4gICRwZXJzcGVjdGl2ZTogZmFsc2Vcbikge1xuICAkdHJhbnM6IHJvdGF0ZVkoJHJvdGF0ZSk7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybTNkKCR0cmFucyk7XG59XG5cbi8vIFJvdGF0ZSBhbiBvYmplY3QgYXJvdW5kIGFuIGFyYml0cmFyeSBheGlzICgzRClcbi8vIEBpbmNsdWRlIHJvdGF0ZSggWyB2ZWN0b3IteCwgdmVjdG9yLXksIHZlY3Rvci16LCByb3RhdGlvbiwgcGVyc3BlY3RpdmUgXSApXG4vLyB3aGVyZSB0aGUgJ3ZlY3Rvci0nIGFyZ3VtZW50cyBhY2NlcHQgdW5pdGxlc3MgbnVtYmVycy5cbi8vIFRoZXNlIG51bWJlcnMgYXJlIG5vdCBpbXBvcnRhbnQgb24gdGhlaXIgb3duLCBidXQgaW4gcmVsYXRpb24gdG8gb25lIGFub3RoZXJcbi8vIGNyZWF0aW5nIGFuIGF4aXMgZnJvbSB5b3VyIHRyYW5zZm9ybS1vcmlnaW4sIGFsb25nIHRoZSBheGlzIG9mIFh4ID0gWXkgPSBaei5cbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gcm90YXRlM2QoXG4gICR2ZWN0b3IteDogJGRlZmF1bHQtdmVjdG9yLXgsXG4gICR2ZWN0b3IteTogJGRlZmF1bHQtdmVjdG9yLXksXG4gICR2ZWN0b3ItejogJGRlZmF1bHQtdmVjdG9yLXosXG4gICRyb3RhdGU6ICRkZWZhdWx0LXJvdGF0ZSxcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZVxuKSB7XG4gICR0cmFuczogcm90YXRlM2QoJHZlY3Rvci14LCAkdmVjdG9yLXksICR2ZWN0b3IteiwgJHJvdGF0ZSk7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybTNkKCR0cmFucyk7XG59XG5cbi8vIEBkb2Mgb2ZmXG4vLyBUcmFuc2xhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEBkb2Mgb25cblxuLy8gTW92ZSBhbiBvYmplY3QgYWxvbmcgdGhlIHggb3IgeSBheGlzICgyRClcbi8vIEBpbmNsdWRlIHRyYW5zbGF0ZSggWyB0cmFuc2xhdGUteCwgdHJhbnNsYXRlLXksIHBlcnNwZWN0aXZlLCAzRC1vbmx5IF0gKVxuLy8gd2hlcmUgdGhlICd0cmFuc2xhdGUtJyBhcmd1bWVudHMgYWNjZXB0IGFueSBkaXN0YW5jZSBpbiBwZXJjZW50YWdlcyBvciBhYnNvbHV0ZSAocHgsIGNtLCBpbiwgZW0gZXRjLi4pIHVuaXRzLlxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiB0cmFuc2xhdGUoXG4gICR0cmFuc2xhdGUteDogJGRlZmF1bHQtdHJhbnNsYXRlLXgsXG4gICR0cmFuc2xhdGUteTogJGRlZmF1bHQtdHJhbnNsYXRlLXksXG4gICRwZXJzcGVjdGl2ZTogZmFsc2UsXG4gICRvbmx5M2Q6ICAgICAgZmFsc2Vcbikge1xuICAkdHJhbnM6IHRyYW5zbGF0ZSgkdHJhbnNsYXRlLXgsICR0cmFuc2xhdGUteSk7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsICRvbmx5M2QpO1xufVxuXG4vLyBNb3ZlIGFuIG9iamVjdCBhbG9uZyB0aGUgeCBheGlzICgyRClcbi8vIEBpbmNsdWRlIHRyYW5zbGF0ZSggWyB0cmFuc2xhdGUteCwgcGVyc3BlY3RpdmUsIDNELW9ubHkgXSApXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHRyYW5zbGF0ZVgoXG4gICR0cmFucy14OiAgICAgJGRlZmF1bHQtdHJhbnNsYXRlLXgsXG4gICRwZXJzcGVjdGl2ZTogZmFsc2UsXG4gICRvbmx5M2Q6ICAgICAgZmFsc2Vcbikge1xuICAkdHJhbnM6IHRyYW5zbGF0ZVgoJHRyYW5zLXgpO1xuICBAaWYgJHBlcnNwZWN0aXZlIHsgJHRyYW5zOiBwZXJzcGVjdGl2ZSgkcGVyc3BlY3RpdmUpICR0cmFuczsgfVxuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCAkb25seTNkKTtcbn1cblxuLy8gTW92ZSBhbiBvYmplY3QgYWxvbmcgdGhlIHkgYXhpcyAoMkQpXG4vLyBAaW5jbHVkZSB0cmFuc2xhdGUoIFsgdHJhbnNsYXRlLXksIHBlcnNwZWN0aXZlLCAzRC1vbmx5IF0gKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiB0cmFuc2xhdGVZKFxuICAkdHJhbnMteTogICAgICRkZWZhdWx0LXRyYW5zbGF0ZS15LFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlLFxuICAkb25seTNkOiAgICAgIGZhbHNlXG4pIHtcbiAgJHRyYW5zOiB0cmFuc2xhdGVZKCR0cmFucy15KTtcbiAgQGlmICRwZXJzcGVjdGl2ZSB7ICR0cmFuczogcGVyc3BlY3RpdmUoJHBlcnNwZWN0aXZlKSAkdHJhbnM7IH1cbiAgQGluY2x1ZGUgdHJhbnNmb3JtKCR0cmFucywgJG9ubHkzZCk7XG59XG5cbi8vIE1vdmUgYW4gb2JqZWN0IGFsb25nIHRoZSB6IGF4aXMgKDNEKVxuLy8gQGluY2x1ZGUgdHJhbnNsYXRlKCBbIHRyYW5zbGF0ZS16LCBwZXJzcGVjdGl2ZSBdIClcbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gdHJhbnNsYXRlWihcbiAgJHRyYW5zLXo6ICAgICAkZGVmYXVsdC10cmFuc2xhdGUteixcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZVxuKSB7XG4gICR0cmFuczogdHJhbnNsYXRlWigkdHJhbnMteik7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybTNkKCR0cmFucyk7XG59XG5cbi8vIE1vdmUgYW4gb2JqZWN0IGFsb25nIHRoZSB4LCB5IGFuZCB6IGF4aXMgKDNEKVxuLy8gQGluY2x1ZGUgdHJhbnNsYXRlKCBbIHRyYW5zbGF0ZS14LCB0cmFuc2xhdGUteSwgdHJhbnNsYXRlLXosIHBlcnNwZWN0aXZlIF0gKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiB0cmFuc2xhdGUzZChcbiAgJHRyYW5zbGF0ZS14OiAkZGVmYXVsdC10cmFuc2xhdGUteCxcbiAgJHRyYW5zbGF0ZS15OiAkZGVmYXVsdC10cmFuc2xhdGUteSxcbiAgJHRyYW5zbGF0ZS16OiAkZGVmYXVsdC10cmFuc2xhdGUteixcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZVxuKSB7XG4gICR0cmFuczogdHJhbnNsYXRlM2QoJHRyYW5zbGF0ZS14LCAkdHJhbnNsYXRlLXksICR0cmFuc2xhdGUteik7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybTNkKCR0cmFucyk7XG59XG5cbi8vIEBkb2Mgb2ZmXG4vLyBTa2V3IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEBkb2Mgb25cblxuLy8gU2tldyBhbiBlbGVtZW50OlxuLy9cbi8vICAgICBAaW5jbHVkZSBza2V3KCBbIHNrZXcteCwgc2tldy15LCAzRC1vbmx5IF0gKVxuLy9cbi8vIHdoZXJlIHRoZSAnc2tldy0nIGFyZ3VtZW50cyBhY2NlcHQgY3NzIGFuZ2xlcyBpbiBkZWdyZWVzIChkZWcpIG9yIHJhZGlhbiAocmFkKSB1bml0cy5cbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gc2tldyhcbiAgJHNrZXcteDogJGRlZmF1bHQtc2tldy14LFxuICAkc2tldy15OiAkZGVmYXVsdC1za2V3LXksXG4gICRvbmx5M2Q6IGZhbHNlXG4pIHtcbiAgJHRyYW5zOiBza2V3KCRza2V3LXgsICRza2V3LXkpO1xuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCAkb25seTNkKTtcbn1cblxuLy8gU2tldyBhbiBlbGVtZW50IGFsb25nIHRoZSB4IGF4aXpcbi8vXG4vLyAgICAgQGluY2x1ZGUgc2tldyggWyBza2V3LXgsIDNELW9ubHkgXSApXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHNrZXdYKFxuICAkc2tldy14OiAkZGVmYXVsdC1za2V3LXgsXG4gICRvbmx5M2Q6IGZhbHNlXG4pIHtcbiAgJHRyYW5zOiBza2V3WCgkc2tldy14KTtcbiAgQGluY2x1ZGUgdHJhbnNmb3JtKCR0cmFucywgJG9ubHkzZCk7XG59XG5cbi8vIFNrZXcgYW4gZWxlbWVudCBhbG9uZyB0aGUgeSBheGlzXG4vL1xuLy8gICAgIEBpbmNsdWRlIHNrZXcoIFsgc2tldy15LCAzRC1vbmx5IF0gKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiBza2V3WShcbiAgJHNrZXcteTogJGRlZmF1bHQtc2tldy15LFxuICAkb25seTNkOiBmYWxzZVxuKSB7XG4gICR0cmFuczogc2tld1koJHNrZXcteSk7XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsICRvbmx5M2QpO1xufVxuXG5cbi8vIEZ1bGwgdHJhbnNmb3JtIG1peGluc1xuLy8gRm9yIHNldHRpbmdzIGFueSBjb21iaW5hdGlvbiBvZiB0cmFuc2Zvcm1zIGFzIGFyZ3VtZW50c1xuLy8gVGhlc2UgYXJlIGNvbXBsZXggYW5kIG5vdCBoaWdobHkgcmVjb21tZW5kZWQgZm9yIGRhaWx5IHVzZS4gVGhleSBhcmUgbWFpbmx5XG4vLyBoZXJlIGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5IHB1cnBvc2VzLlxuLy9cbi8vICogdGhleSBpbmNsdWRlIG9yaWdpbiBhZGp1c3RtZW50c1xuLy8gKiBzY2FsZSB0YWtlcyBhIG11bHRpcGxpZXIgKHVuaXRsZXNzKSwgcm90YXRlIGFuZCBza2V3IHRha2UgZGVncmVlcyAoZGVnKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiBjcmVhdGUtdHJhbnNmb3JtKFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlLFxuICAkc2NhbGUteDogICAgIGZhbHNlLFxuICAkc2NhbGUteTogICAgIGZhbHNlLFxuICAkc2NhbGUtejogICAgIGZhbHNlLFxuICAkcm90YXRlLXg6ICAgIGZhbHNlLFxuICAkcm90YXRlLXk6ICAgIGZhbHNlLFxuICAkcm90YXRlLXo6ICAgIGZhbHNlLFxuICAkcm90YXRlM2Q6ICAgIGZhbHNlLFxuICAkdHJhbnMteDogICAgIGZhbHNlLFxuICAkdHJhbnMteTogICAgIGZhbHNlLFxuICAkdHJhbnMtejogICAgIGZhbHNlLFxuICAkc2tldy14OiAgICAgIGZhbHNlLFxuICAkc2tldy15OiAgICAgIGZhbHNlLFxuICAkb3JpZ2luLXg6ICAgIGZhbHNlLFxuICAkb3JpZ2luLXk6ICAgIGZhbHNlLFxuICAkb3JpZ2luLXo6ICAgIGZhbHNlLFxuICAkb25seTNkOiAgICAgIGZhbHNlXG4pIHtcbiAgJHRyYW5zOiB1bnF1b3RlKFwiXCIpO1xuXG4gIC8vIHBlcnNwZWN0aXZlXG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgOyB9XG5cbiAgLy8gc2NhbGVcbiAgQGlmICRzY2FsZS14IGFuZCAkc2NhbGUteSB7XG4gICAgQGlmICRzY2FsZS16IHsgJHRyYW5zOiAkdHJhbnMgc2NhbGUzZCgkc2NhbGUteCwgJHNjYWxlLXksICRzY2FsZS16KTsgfVxuICAgIEBlbHNlIHsgJHRyYW5zOiAkdHJhbnMgc2NhbGUoJHNjYWxlLXgsICRzY2FsZS15KTsgfVxuICB9IEBlbHNlIHtcbiAgICBAaWYgJHNjYWxlLXggeyAkdHJhbnM6ICR0cmFucyBzY2FsZVgoJHNjYWxlLXgpOyB9XG4gICAgQGlmICRzY2FsZS15IHsgJHRyYW5zOiAkdHJhbnMgc2NhbGVZKCRzY2FsZS15KTsgfVxuICAgIEBpZiAkc2NhbGUteiB7ICR0cmFuczogJHRyYW5zIHNjYWxlWigkc2NhbGUteik7IH1cbiAgfVxuXG4gIC8vIHJvdGF0ZVxuICBAaWYgJHJvdGF0ZS14IHsgJHRyYW5zOiAkdHJhbnMgcm90YXRlWCgkcm90YXRlLXgpOyB9XG4gIEBpZiAkcm90YXRlLXkgeyAkdHJhbnM6ICR0cmFucyByb3RhdGVZKCRyb3RhdGUteSk7IH1cbiAgQGlmICRyb3RhdGUteiB7ICR0cmFuczogJHRyYW5zIHJvdGF0ZVooJHJvdGF0ZS16KTsgfVxuICBAaWYgJHJvdGF0ZTNkIHsgJHRyYW5zOiAkdHJhbnMgcm90YXRlM2QoJHJvdGF0ZTNkKTsgfVxuXG4gIC8vIHRyYW5zbGF0ZVxuICBAaWYgJHRyYW5zLXggYW5kICR0cmFucy15IHtcbiAgICBAaWYgJHRyYW5zLXogeyAkdHJhbnM6ICR0cmFucyB0cmFuc2xhdGUzZCgkdHJhbnMteCwgJHRyYW5zLXksICR0cmFucy16KTsgfVxuICAgIEBlbHNlIHsgJHRyYW5zOiAkdHJhbnMgdHJhbnNsYXRlKCR0cmFucy14LCAkdHJhbnMteSk7IH1cbiAgfSBAZWxzZSB7XG4gICAgQGlmICR0cmFucy14IHsgJHRyYW5zOiAkdHJhbnMgdHJhbnNsYXRlWCgkdHJhbnMteCk7IH1cbiAgICBAaWYgJHRyYW5zLXkgeyAkdHJhbnM6ICR0cmFucyB0cmFuc2xhdGVZKCR0cmFucy15KTsgfVxuICAgIEBpZiAkdHJhbnMteiB7ICR0cmFuczogJHRyYW5zIHRyYW5zbGF0ZVooJHRyYW5zLXopOyB9XG4gIH1cblxuICAvLyBza2V3XG4gIEBpZiAkc2tldy14IGFuZCAkc2tldy15IHsgJHRyYW5zOiAkdHJhbnMgc2tldygkc2tldy14LCAkc2tldy15KTsgfVxuICBAZWxzZSB7XG4gICAgQGlmICRza2V3LXggeyAkdHJhbnM6ICR0cmFucyBza2V3WCgkc2tldy14KTsgfVxuICAgIEBpZiAkc2tldy15IHsgJHRyYW5zOiAkdHJhbnMgc2tld1koJHNrZXcteSk7IH1cbiAgfVxuXG4gIC8vIGFwcGx5IGl0IVxuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCAkb25seTNkKTtcbiAgQGluY2x1ZGUgdHJhbnNmb3JtLW9yaWdpbigkb3JpZ2luLXgsICRvcmlnaW4teSwgJG9yaWdpbi16LCAkb25seTNkKTtcbn1cblxuXG4vLyBBIHNpbXBsaWZpZWQgc2V0IG9mIG9wdGlvbnNcbi8vIGJhY2t3YXJkcy1jb21wYXRpYmxlIHdpdGggdGhlIHByZXZpb3VzIHZlcnNpb24gb2YgdGhlICd0cmFuc2Zvcm0nIG1peGluXG5AbWl4aW4gc2ltcGxlLXRyYW5zZm9ybShcbiAgJHNjYWxlOiAgICBmYWxzZSxcbiAgJHJvdGF0ZTogICBmYWxzZSxcbiAgJHRyYW5zLXg6ICBmYWxzZSxcbiAgJHRyYW5zLXk6ICBmYWxzZSxcbiAgJHNrZXcteDogICBmYWxzZSxcbiAgJHNrZXcteTogICBmYWxzZSxcbiAgJG9yaWdpbi14OiBmYWxzZSxcbiAgJG9yaWdpbi15OiBmYWxzZVxuKSB7XG4gIEBpbmNsdWRlIGNyZWF0ZS10cmFuc2Zvcm0oXG4gICAgZmFsc2UsXG4gICAgJHNjYWxlLCAkc2NhbGUsIGZhbHNlLFxuICAgIGZhbHNlLCBmYWxzZSwgJHJvdGF0ZSwgZmFsc2UsXG4gICAgJHRyYW5zLXgsICR0cmFucy15LCBmYWxzZSxcbiAgICAkc2tldy14LCAkc2tldy15LFxuICAgICRvcmlnaW4teCwgJG9yaWdpbi15LCBmYWxzZSxcbiAgICBmYWxzZVxuICApO1xufVxuIl19 */

/*# sourceMappingURL=../../maps/module/css/module.css.map */
