/*
 * @description: common css variable and function
 * @version: 0.1
 */
.icon-sprite, .icon-app, .icon-cluster, .icon-deploy, .icon-doc, .icon-down, .icon-global, .icon-image, .icon-monitor, .icon-project, .icon-user {
  background-image: url(/module/images/icon-sc7f6ed683e.png);
  background-repeat: no-repeat; }

.icon-app {
  background-position: 0 0; }

.icon-cluster {
  background-position: 0 -24px; }

.icon-deploy {
  background-position: 0 -48px; }

.icon-doc {
  background-position: 0 -72px; }

.icon-down {
  background-position: 0 -86px; }

.icon-global {
  background-position: 0 -91px; }

.icon-image {
  background-position: 0 -115px; }

.icon-monitor {
  background-position: 0 -139px; }

.icon-project {
  background-position: 0 -163px; }

.icon-user {
  background-position: 0 -187px; }

.icon-sprite, .icon-app, .icon-cluster, .icon-deploy, .icon-doc, .icon-down, .icon-global, .icon-image, .icon-monitor, .icon-project, .icon-user, .icon-app, .icon-cluster, .icon-deploy, .icon-global, .icon-image, .icon-monitor, .icon-project, .icon-user {
  display: inline-block;
  width: 24px;
  height: 24px;
  vertical-align: middle;
  margin-right: 22px; }

.icon-doc {
  display: inline-block;
  width: 14px;
  height: 14px;
  margin-right: 4px; }

.icon-down {
  display: inline-block;
  height: 5px;
  width: 10px;
  margin-left: 8px;
  -moz-transition: rotate 0.4s;
  -o-transition: rotate 0.4s;
  -webkit-transition: rotate 0.4s;
  transition: rotate 0.4s; }
  .icon-down.up {
    -moz-transform: rotate(-90deg);
    -ms-transform: rotate(-90deg);
    -webkit-transform: rotate(-90deg);
    transform: rotate(-90deg);
    -moz-transition: rotate 0.4s;
    -o-transition: rotate 0.4s;
    -webkit-transition: rotate 0.4s;
    transition: rotate 0.4s; }

* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

*:before,
*:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

body {
  background: #6aa9f6 url(/module/images/background.jpg) no-repeat center center;
  background-size: cover;
  background-attachment: fixed;
  min-height: 560px;
  padding-top: 4%;
  padding-bottom: 2%;
  color: #fff; }

.module-con {
  position: relative;
  width: 58%;
  margin: 0 auto; }
  .module-con .log-con {
    position: absolute;
    right: 100%;
    top: 7%;
    width: 128px;
    text-align: right;
    margin-right: 8%;
    line-height: 12px; }
    .module-con .log-con img {
      vertical-align: bottom; }
    .module-con .log-con .version {
      font-size: 12px; }
  .module-con .option-con {
    position: absolute;
    left: 100%;
    top: 7%;
    width: 260px;
    margin-left: 8%; }
    .module-con .option-con .com-user-option .arrow {
      left: 19px; }
    .module-con .option-con .link-doc {
      color: #fff; }
    .module-con .option-con .user-con {
      position: relative;
      margin-top: 30px; }
      .module-con .option-con .user-con .username {
        color: #fff; }
      .module-con .option-con .user-con .com-user-option {
        left: 0; }
  .module-con .list-module {
    width: 100%;
    border-left: 1px solid rgba(255, 255, 255, 0.5);
    border-right: 1px solid rgba(255, 255, 255, 0.5); }
    .module-con .list-module li {
      border-bottom: 1px solid rgba(255, 255, 255, 0.5);
      font-size: 0; }
      .module-con .list-module li:last-child {
        border-bottom: none; }
      .module-con .list-module li .module {
        display: inline-block;
        width: 50%;
        padding: 7% 0 7% 0;
        color: #fff;
        font-size: 18px;
        text-align: center;
        border-right: 1px solid rgba(255, 255, 255, 0.5); }
        .module-con .list-module li .module:hover {
          background-color: rgba(255, 255, 255, 0.2);
          -moz-transition: background-color 0.3s;
          -o-transition: background-color 0.3s;
          -webkit-transition: background-color 0.3s;
          transition: background-color 0.3s; }
        .module-con .list-module li .module:last-child {
          border-right: none; }
        .module-con .list-module li .module h4 {
          display: inline-block;
          margin: 0;
          width: 128px;
          text-align: left; }

@media (max-width: 1500px) {
  .module-con {
    width: 51%; } }
@media (max-width: 1300px) {
  .module-con {
    width: 46%; } }
.modal-body {
  color: #888; }
  .modal-body input {
    width: 340px; }



/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=../../maps/module/css/module.css.map */
