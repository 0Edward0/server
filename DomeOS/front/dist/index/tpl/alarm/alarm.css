/*
 * @description: common css variable and function
 * @version: 0.1
 */
.mod-alarm .mod-option {
  padding-left: 52px; }
  .mod-alarm .mod-option .alarm-prompt {
    padding-top: 16px; }
  .mod-alarm .mod-option .btn-newtemplate {
    margin-top: 7px; }
.mod-alarm .tab-hostsgroups {
  padding: 20px; }
  .mod-alarm .tab-hostsgroups .list-hostgroups {
    overflow: hidden;
    padding-top: 4px; }
    .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-wrap {
      float: left;
      width: 33.33%;
      padding-right: 16px;
      margin-top: 16px; }
    .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup {
      border: 1px solid #d4d7de; }
    .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-header {
      position: relative;
      height: 70px;
      padding: 12px;
      border-bottom: 1px solid #d4d7de;
      background-color: #f5f5f5; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-header .hostgroup-name {
        margin-bottom: 4px;
        color: #444;
        font-size: 22px; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-header .hostgroup-detail {
        font-size: 12px; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-header .hostgroup-opt {
        position: absolute;
        top: 6px;
        right: 6px;
        text-align: right; }
        .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-header .hostgroup-opt .ui-btn-select {
          position: relative;
          z-index: 2; }
        .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-header .hostgroup-opt .select-list {
          position: absolute;
          top: 10px;
          right: 8px;
          width: 72px;
          text-align: center;
          -moz-box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.1);
          -webkit-box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.1);
          box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.1); }
          .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-header .hostgroup-opt .select-list li {
            background-color: #fff;
            padding: 6px 4px 6px;
            border-bottom: 1px solid #d4d7de; }
            .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-header .hostgroup-opt .select-list li:last-child {
              border-bottom: none; }
            .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-header .hostgroup-opt .select-list li a:hover {
              color: #5dabf3; }
    .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body {
      height: 294px; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .hostgroup-left {
        float: left;
        width: 65%;
        border-right: 1px solid #d4d7de; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .hostgroup-right {
        float: left;
        width: 35%;
        height: 294px; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .hostgroup-left-header {
        height: 46px;
        border-bottom: 1px solid #d4d7de; }
        .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .hostgroup-left-header em {
          display: inline-block;
          margin: 16px 0 0 12px; }
        .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .hostgroup-left-header .link-addhost {
          float: right;
          display: block;
          margin: 8px 18px 0 0;
          padding: 6px 10px 6px 10px;
          border: 1px solid #5dabf3;
          border-radius: 22px; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .hostgroup-right-header {
        height: 46px;
        padding: 16px 0 0 12px; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-hosts-wrap {
        position: relative; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-hosts {
        height: 248px;
        overflow-y: auto; }
        .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-hosts .sig-host {
          float: left;
          padding: 10px 12px 10px 12px;
          height: 62px;
          border-right: 1px solid #d4d7de;
          border-bottom: 1px solid #d4d7de; }
          .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-hosts .sig-host .icon-cancel {
            position: absolute;
            display: none;
            right: -6px;
            top: -2px; }
          .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-hosts .sig-host:hover .icon-cancel {
            display: block; }
          .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-hosts .sig-host .sig-host-info-wrap {
            position: relative; }
        .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-hosts .tool-nowrap {
          display: block;
          text-align: center;
          width: 100%; }
      .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-tpls {
        padding: 2px 12px 12px; }
        .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-tpls li {
          position: relative;
          margin-bottom: 10px; }
          .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-tpls li:last-child {
            margin-bottom: 0; }
          .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-tpls li .tpl-wrap {
            display: inline-block;
            max-width: 100%; }
          .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .list-tpls li .popover {
            max-width: 100%; }
      @media (min-width: 900px) and (max-width: 1450px) {
        .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .sig-host {
          width: 50%; }
          .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .sig-host:nth-child(2n) {
            border-right: 0; } }
      @media (min-width: 1450px) {
        .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .sig-host {
          width: 33.3%; }
          .mod-alarm .tab-hostsgroups .list-hostgroups .hostgroup-body .sig-host:nth-child(3n) {
            width: 33.4%;
            border-right: 0; } }



/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=../../../maps/index/tpl/alarm/alarm-1ce0d75b01.css.map */
